import org.gradle.internal.jvm.Jvm

import static org.apache.tools.ant.taskdefs.condition.Os.*

plugins {
    id 'cpp-library'
}

Task generateHeaders = project(':arrow-processor').generateNativeHeaders

def localLibPath = System.getenv("LOCAL_LIBRARY_PATH") ?: "/usr/local/lib"

library {
    privateHeaders.from generateHeaders.outputs.files[0]

    binaries.configureEach {
        compileTask.get().dependsOn(generateHeaders)

        compileTask.get().compilerArgs.add("-v")
        compileTask.get().compilerArgs.add("--std=c++14")
        compileTask.get().compilerArgs.add("-Wall")
        compileTask.get().includes '/usr/local/include'
        compileTask.get().includes("${Jvm.current().javaHome}/include")

        if (isFamily(FAMILY_MAC)) {
            compileTask.get().includes("${Jvm.current().javaHome}/include/darwin")

            compileTask.get().toolChain.set(toolChains.withType(Clang)[0])
            compileTask.get().compilerArgs.add('-mmacosx-version-min=10.9')

            linkTask.get().linkerArgs.add('-mmacosx-version-min=10.9')
            linkTask.get().linkerArgs.add("--std=c++14")
            linkTask.get().toolChain.set(toolChains.withType(Clang)[0])

            linkTask.get().lib("$localLibPath/libprotobuf.dylib")
            linkTask.get().lib("$localLibPath/libarrow.dylib")
            linkTask.get().lib("$localLibPath/libplasma.dylib")
            linkTask.get().lib("$localLibPath/libfletcher.dylib")
            linkTask.get().lib("$localLibPath/libfletcher_echo.dylib")
            linkTask.get().lib("$localLibPath/libparquet.dylib")
        } else if (isFamily(FAMILY_UNIX)) {
            compileTask.get().includes("${Jvm.current().javaHome}/include/linux")

            linkTask.get().lib("$localLibPath/libprotobuf.so")
            linkTask.get().lib("$localLibPath/libarrow.so")
            linkTask.get().lib("$localLibPath/libplasma.so")
            linkTask.get().lib("$localLibPath/libfletcher.so")
            linkTask.get().lib("$localLibPath/libfletcher_echo.so")
            linkTask.get().lib("$localLibPath/libparquet.so")
        }
    }
}