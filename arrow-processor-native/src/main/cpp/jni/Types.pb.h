// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Types_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Types_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Types_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Types_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[29]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Types_2eproto;
namespace types {
class AndNode;
class AndNodeDefaultTypeInternal;
extern AndNodeDefaultTypeInternal _AndNode_default_instance_;
class BinaryConstants;
class BinaryConstantsDefaultTypeInternal;
extern BinaryConstantsDefaultTypeInternal _BinaryConstants_default_instance_;
class BinaryNode;
class BinaryNodeDefaultTypeInternal;
extern BinaryNodeDefaultTypeInternal _BinaryNode_default_instance_;
class BooleanNode;
class BooleanNodeDefaultTypeInternal;
extern BooleanNodeDefaultTypeInternal _BooleanNode_default_instance_;
class Condition;
class ConditionDefaultTypeInternal;
extern ConditionDefaultTypeInternal _Condition_default_instance_;
class DecimalNode;
class DecimalNodeDefaultTypeInternal;
extern DecimalNodeDefaultTypeInternal _DecimalNode_default_instance_;
class DoubleNode;
class DoubleNodeDefaultTypeInternal;
extern DoubleNodeDefaultTypeInternal _DoubleNode_default_instance_;
class ExpressionList;
class ExpressionListDefaultTypeInternal;
extern ExpressionListDefaultTypeInternal _ExpressionList_default_instance_;
class ExpressionRoot;
class ExpressionRootDefaultTypeInternal;
extern ExpressionRootDefaultTypeInternal _ExpressionRoot_default_instance_;
class ExtGandivaType;
class ExtGandivaTypeDefaultTypeInternal;
extern ExtGandivaTypeDefaultTypeInternal _ExtGandivaType_default_instance_;
class Field;
class FieldDefaultTypeInternal;
extern FieldDefaultTypeInternal _Field_default_instance_;
class FieldNode;
class FieldNodeDefaultTypeInternal;
extern FieldNodeDefaultTypeInternal _FieldNode_default_instance_;
class FloatNode;
class FloatNodeDefaultTypeInternal;
extern FloatNodeDefaultTypeInternal _FloatNode_default_instance_;
class FunctionNode;
class FunctionNodeDefaultTypeInternal;
extern FunctionNodeDefaultTypeInternal _FunctionNode_default_instance_;
class FunctionSignature;
class FunctionSignatureDefaultTypeInternal;
extern FunctionSignatureDefaultTypeInternal _FunctionSignature_default_instance_;
class GandivaDataTypes;
class GandivaDataTypesDefaultTypeInternal;
extern GandivaDataTypesDefaultTypeInternal _GandivaDataTypes_default_instance_;
class GandivaFunctions;
class GandivaFunctionsDefaultTypeInternal;
extern GandivaFunctionsDefaultTypeInternal _GandivaFunctions_default_instance_;
class IfNode;
class IfNodeDefaultTypeInternal;
extern IfNodeDefaultTypeInternal _IfNode_default_instance_;
class InNode;
class InNodeDefaultTypeInternal;
extern InNodeDefaultTypeInternal _InNode_default_instance_;
class IntConstants;
class IntConstantsDefaultTypeInternal;
extern IntConstantsDefaultTypeInternal _IntConstants_default_instance_;
class IntNode;
class IntNodeDefaultTypeInternal;
extern IntNodeDefaultTypeInternal _IntNode_default_instance_;
class LongConstants;
class LongConstantsDefaultTypeInternal;
extern LongConstantsDefaultTypeInternal _LongConstants_default_instance_;
class LongNode;
class LongNodeDefaultTypeInternal;
extern LongNodeDefaultTypeInternal _LongNode_default_instance_;
class NullNode;
class NullNodeDefaultTypeInternal;
extern NullNodeDefaultTypeInternal _NullNode_default_instance_;
class OrNode;
class OrNodeDefaultTypeInternal;
extern OrNodeDefaultTypeInternal _OrNode_default_instance_;
class Schema;
class SchemaDefaultTypeInternal;
extern SchemaDefaultTypeInternal _Schema_default_instance_;
class StringConstants;
class StringConstantsDefaultTypeInternal;
extern StringConstantsDefaultTypeInternal _StringConstants_default_instance_;
class StringNode;
class StringNodeDefaultTypeInternal;
extern StringNodeDefaultTypeInternal _StringNode_default_instance_;
class TreeNode;
class TreeNodeDefaultTypeInternal;
extern TreeNodeDefaultTypeInternal _TreeNode_default_instance_;
}  // namespace types
PROTOBUF_NAMESPACE_OPEN
template<> ::types::AndNode* Arena::CreateMaybeMessage<::types::AndNode>(Arena*);
template<> ::types::BinaryConstants* Arena::CreateMaybeMessage<::types::BinaryConstants>(Arena*);
template<> ::types::BinaryNode* Arena::CreateMaybeMessage<::types::BinaryNode>(Arena*);
template<> ::types::BooleanNode* Arena::CreateMaybeMessage<::types::BooleanNode>(Arena*);
template<> ::types::Condition* Arena::CreateMaybeMessage<::types::Condition>(Arena*);
template<> ::types::DecimalNode* Arena::CreateMaybeMessage<::types::DecimalNode>(Arena*);
template<> ::types::DoubleNode* Arena::CreateMaybeMessage<::types::DoubleNode>(Arena*);
template<> ::types::ExpressionList* Arena::CreateMaybeMessage<::types::ExpressionList>(Arena*);
template<> ::types::ExpressionRoot* Arena::CreateMaybeMessage<::types::ExpressionRoot>(Arena*);
template<> ::types::ExtGandivaType* Arena::CreateMaybeMessage<::types::ExtGandivaType>(Arena*);
template<> ::types::Field* Arena::CreateMaybeMessage<::types::Field>(Arena*);
template<> ::types::FieldNode* Arena::CreateMaybeMessage<::types::FieldNode>(Arena*);
template<> ::types::FloatNode* Arena::CreateMaybeMessage<::types::FloatNode>(Arena*);
template<> ::types::FunctionNode* Arena::CreateMaybeMessage<::types::FunctionNode>(Arena*);
template<> ::types::FunctionSignature* Arena::CreateMaybeMessage<::types::FunctionSignature>(Arena*);
template<> ::types::GandivaDataTypes* Arena::CreateMaybeMessage<::types::GandivaDataTypes>(Arena*);
template<> ::types::GandivaFunctions* Arena::CreateMaybeMessage<::types::GandivaFunctions>(Arena*);
template<> ::types::IfNode* Arena::CreateMaybeMessage<::types::IfNode>(Arena*);
template<> ::types::InNode* Arena::CreateMaybeMessage<::types::InNode>(Arena*);
template<> ::types::IntConstants* Arena::CreateMaybeMessage<::types::IntConstants>(Arena*);
template<> ::types::IntNode* Arena::CreateMaybeMessage<::types::IntNode>(Arena*);
template<> ::types::LongConstants* Arena::CreateMaybeMessage<::types::LongConstants>(Arena*);
template<> ::types::LongNode* Arena::CreateMaybeMessage<::types::LongNode>(Arena*);
template<> ::types::NullNode* Arena::CreateMaybeMessage<::types::NullNode>(Arena*);
template<> ::types::OrNode* Arena::CreateMaybeMessage<::types::OrNode>(Arena*);
template<> ::types::Schema* Arena::CreateMaybeMessage<::types::Schema>(Arena*);
template<> ::types::StringConstants* Arena::CreateMaybeMessage<::types::StringConstants>(Arena*);
template<> ::types::StringNode* Arena::CreateMaybeMessage<::types::StringNode>(Arena*);
template<> ::types::TreeNode* Arena::CreateMaybeMessage<::types::TreeNode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace types {

enum GandivaType : int {
  NONE = 0,
  BOOL = 1,
  UINT8 = 2,
  INT8 = 3,
  UINT16 = 4,
  INT16 = 5,
  UINT32 = 6,
  INT32 = 7,
  UINT64 = 8,
  INT64 = 9,
  HALF_FLOAT = 10,
  FLOAT = 11,
  DOUBLE = 12,
  UTF8 = 13,
  BINARY = 14,
  FIXED_SIZE_BINARY = 15,
  DATE32 = 16,
  DATE64 = 17,
  TIMESTAMP = 18,
  TIME32 = 19,
  TIME64 = 20,
  INTERVAL = 21,
  DECIMAL = 22,
  LIST = 23,
  STRUCT = 24,
  UNION = 25,
  DICTIONARY = 26,
  MAP = 27
};
bool GandivaType_IsValid(int value);
constexpr GandivaType GandivaType_MIN = NONE;
constexpr GandivaType GandivaType_MAX = MAP;
constexpr int GandivaType_ARRAYSIZE = GandivaType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GandivaType_descriptor();
template<typename T>
inline const std::string& GandivaType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GandivaType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GandivaType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GandivaType_descriptor(), enum_t_value);
}
inline bool GandivaType_Parse(
    const std::string& name, GandivaType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GandivaType>(
    GandivaType_descriptor(), name, value);
}
enum DateUnit : int {
  DAY = 0,
  MILLI = 1
};
bool DateUnit_IsValid(int value);
constexpr DateUnit DateUnit_MIN = DAY;
constexpr DateUnit DateUnit_MAX = MILLI;
constexpr int DateUnit_ARRAYSIZE = DateUnit_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DateUnit_descriptor();
template<typename T>
inline const std::string& DateUnit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DateUnit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DateUnit_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DateUnit_descriptor(), enum_t_value);
}
inline bool DateUnit_Parse(
    const std::string& name, DateUnit* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DateUnit>(
    DateUnit_descriptor(), name, value);
}
enum TimeUnit : int {
  SEC = 0,
  MILLISEC = 1,
  MICROSEC = 2,
  NANOSEC = 3
};
bool TimeUnit_IsValid(int value);
constexpr TimeUnit TimeUnit_MIN = SEC;
constexpr TimeUnit TimeUnit_MAX = NANOSEC;
constexpr int TimeUnit_ARRAYSIZE = TimeUnit_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeUnit_descriptor();
template<typename T>
inline const std::string& TimeUnit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TimeUnit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TimeUnit_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TimeUnit_descriptor(), enum_t_value);
}
inline bool TimeUnit_Parse(
    const std::string& name, TimeUnit* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TimeUnit>(
    TimeUnit_descriptor(), name, value);
}
enum IntervalType : int {
  YEAR_MONTH = 0,
  DAY_TIME = 1
};
bool IntervalType_IsValid(int value);
constexpr IntervalType IntervalType_MIN = YEAR_MONTH;
constexpr IntervalType IntervalType_MAX = DAY_TIME;
constexpr int IntervalType_ARRAYSIZE = IntervalType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IntervalType_descriptor();
template<typename T>
inline const std::string& IntervalType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IntervalType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IntervalType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IntervalType_descriptor(), enum_t_value);
}
inline bool IntervalType_Parse(
    const std::string& name, IntervalType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IntervalType>(
    IntervalType_descriptor(), name, value);
}
enum SelectionVectorType : int {
  SV_NONE = 0,
  SV_INT16 = 1,
  SV_INT32 = 2
};
bool SelectionVectorType_IsValid(int value);
constexpr SelectionVectorType SelectionVectorType_MIN = SV_NONE;
constexpr SelectionVectorType SelectionVectorType_MAX = SV_INT32;
constexpr int SelectionVectorType_ARRAYSIZE = SelectionVectorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelectionVectorType_descriptor();
template<typename T>
inline const std::string& SelectionVectorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SelectionVectorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SelectionVectorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SelectionVectorType_descriptor(), enum_t_value);
}
inline bool SelectionVectorType_Parse(
    const std::string& name, SelectionVectorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SelectionVectorType>(
    SelectionVectorType_descriptor(), name, value);
}
// ===================================================================

class ExtGandivaType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.ExtGandivaType) */ {
 public:
  ExtGandivaType();
  virtual ~ExtGandivaType();

  ExtGandivaType(const ExtGandivaType& from);
  ExtGandivaType(ExtGandivaType&& from) noexcept
    : ExtGandivaType() {
    *this = ::std::move(from);
  }

  inline ExtGandivaType& operator=(const ExtGandivaType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtGandivaType& operator=(ExtGandivaType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExtGandivaType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExtGandivaType* internal_default_instance() {
    return reinterpret_cast<const ExtGandivaType*>(
               &_ExtGandivaType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExtGandivaType& a, ExtGandivaType& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtGandivaType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExtGandivaType* New() const final {
    return CreateMaybeMessage<ExtGandivaType>(nullptr);
  }

  ExtGandivaType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExtGandivaType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExtGandivaType& from);
  void MergeFrom(const ExtGandivaType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtGandivaType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.ExtGandivaType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeZoneFieldNumber = 7,
    kTypeFieldNumber = 1,
    kWidthFieldNumber = 2,
    kPrecisionFieldNumber = 3,
    kScaleFieldNumber = 4,
    kDateUnitFieldNumber = 5,
    kTimeUnitFieldNumber = 6,
    kIntervalTypeFieldNumber = 8,
  };
  // optional string timeZone = 7;
  bool has_timezone() const;
  private:
  bool _internal_has_timezone() const;
  public:
  void clear_timezone();
  const std::string& timezone() const;
  void set_timezone(const std::string& value);
  void set_timezone(std::string&& value);
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  std::string* mutable_timezone();
  std::string* release_timezone();
  void set_allocated_timezone(std::string* timezone);
  private:
  const std::string& _internal_timezone() const;
  void _internal_set_timezone(const std::string& value);
  std::string* _internal_mutable_timezone();
  public:

  // optional .types.GandivaType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::types::GandivaType type() const;
  void set_type(::types::GandivaType value);
  private:
  ::types::GandivaType _internal_type() const;
  void _internal_set_type(::types::GandivaType value);
  public:

  // optional uint32 width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 precision = 3;
  bool has_precision() const;
  private:
  bool _internal_has_precision() const;
  public:
  void clear_precision();
  ::PROTOBUF_NAMESPACE_ID::int32 precision() const;
  void set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_precision() const;
  void _internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 scale = 4;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  ::PROTOBUF_NAMESPACE_ID::int32 scale() const;
  void set_scale(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scale() const;
  void _internal_set_scale(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .types.DateUnit dateUnit = 5;
  bool has_dateunit() const;
  private:
  bool _internal_has_dateunit() const;
  public:
  void clear_dateunit();
  ::types::DateUnit dateunit() const;
  void set_dateunit(::types::DateUnit value);
  private:
  ::types::DateUnit _internal_dateunit() const;
  void _internal_set_dateunit(::types::DateUnit value);
  public:

  // optional .types.TimeUnit timeUnit = 6;
  bool has_timeunit() const;
  private:
  bool _internal_has_timeunit() const;
  public:
  void clear_timeunit();
  ::types::TimeUnit timeunit() const;
  void set_timeunit(::types::TimeUnit value);
  private:
  ::types::TimeUnit _internal_timeunit() const;
  void _internal_set_timeunit(::types::TimeUnit value);
  public:

  // optional .types.IntervalType intervalType = 8;
  bool has_intervaltype() const;
  private:
  bool _internal_has_intervaltype() const;
  public:
  void clear_intervaltype();
  ::types::IntervalType intervaltype() const;
  void set_intervaltype(::types::IntervalType value);
  private:
  ::types::IntervalType _internal_intervaltype() const;
  void _internal_set_intervaltype(::types::IntervalType value);
  public:

  // @@protoc_insertion_point(class_scope:types.ExtGandivaType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 precision_;
  ::PROTOBUF_NAMESPACE_ID::int32 scale_;
  int dateunit_;
  int timeunit_;
  int intervaltype_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class Field :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.Field) */ {
 public:
  Field();
  virtual ~Field();

  Field(const Field& from);
  Field(Field&& from) noexcept
    : Field() {
    *this = ::std::move(from);
  }

  inline Field& operator=(const Field& from) {
    CopyFrom(from);
    return *this;
  }
  inline Field& operator=(Field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Field& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Field* internal_default_instance() {
    return reinterpret_cast<const Field*>(
               &_Field_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Field& a, Field& b) {
    a.Swap(&b);
  }
  inline void Swap(Field* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Field* New() const final {
    return CreateMaybeMessage<Field>(nullptr);
  }

  Field* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Field>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Field& from);
  void MergeFrom(const Field& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Field* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.Field";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 4,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kNullableFieldNumber = 3,
  };
  // repeated .types.Field children = 4;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::types::Field* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Field >*
      mutable_children();
  private:
  const ::types::Field& _internal_children(int index) const;
  ::types::Field* _internal_add_children();
  public:
  const ::types::Field& children(int index) const;
  ::types::Field* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Field >&
      children() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .types.ExtGandivaType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::types::ExtGandivaType& type() const;
  ::types::ExtGandivaType* release_type();
  ::types::ExtGandivaType* mutable_type();
  void set_allocated_type(::types::ExtGandivaType* type);
  private:
  const ::types::ExtGandivaType& _internal_type() const;
  ::types::ExtGandivaType* _internal_mutable_type();
  public:

  // optional bool nullable = 3;
  bool has_nullable() const;
  private:
  bool _internal_has_nullable() const;
  public:
  void clear_nullable();
  bool nullable() const;
  void set_nullable(bool value);
  private:
  bool _internal_nullable() const;
  void _internal_set_nullable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:types.Field)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Field > children_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::types::ExtGandivaType* type_;
  bool nullable_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class FieldNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.FieldNode) */ {
 public:
  FieldNode();
  virtual ~FieldNode();

  FieldNode(const FieldNode& from);
  FieldNode(FieldNode&& from) noexcept
    : FieldNode() {
    *this = ::std::move(from);
  }

  inline FieldNode& operator=(const FieldNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldNode& operator=(FieldNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldNode* internal_default_instance() {
    return reinterpret_cast<const FieldNode*>(
               &_FieldNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FieldNode& a, FieldNode& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldNode* New() const final {
    return CreateMaybeMessage<FieldNode>(nullptr);
  }

  FieldNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldNode& from);
  void MergeFrom(const FieldNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.FieldNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
  };
  // optional .types.Field field = 1;
  bool has_field() const;
  private:
  bool _internal_has_field() const;
  public:
  void clear_field();
  const ::types::Field& field() const;
  ::types::Field* release_field();
  ::types::Field* mutable_field();
  void set_allocated_field(::types::Field* field);
  private:
  const ::types::Field& _internal_field() const;
  ::types::Field* _internal_mutable_field();
  public:

  // @@protoc_insertion_point(class_scope:types.FieldNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::types::Field* field_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class FunctionNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.FunctionNode) */ {
 public:
  FunctionNode();
  virtual ~FunctionNode();

  FunctionNode(const FunctionNode& from);
  FunctionNode(FunctionNode&& from) noexcept
    : FunctionNode() {
    *this = ::std::move(from);
  }

  inline FunctionNode& operator=(const FunctionNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionNode& operator=(FunctionNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FunctionNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FunctionNode* internal_default_instance() {
    return reinterpret_cast<const FunctionNode*>(
               &_FunctionNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FunctionNode& a, FunctionNode& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FunctionNode* New() const final {
    return CreateMaybeMessage<FunctionNode>(nullptr);
  }

  FunctionNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FunctionNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FunctionNode& from);
  void MergeFrom(const FunctionNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.FunctionNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInArgsFieldNumber = 2,
    kFunctionNameFieldNumber = 1,
    kReturnTypeFieldNumber = 3,
  };
  // repeated .types.TreeNode inArgs = 2;
  int inargs_size() const;
  private:
  int _internal_inargs_size() const;
  public:
  void clear_inargs();
  ::types::TreeNode* mutable_inargs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::TreeNode >*
      mutable_inargs();
  private:
  const ::types::TreeNode& _internal_inargs(int index) const;
  ::types::TreeNode* _internal_add_inargs();
  public:
  const ::types::TreeNode& inargs(int index) const;
  ::types::TreeNode* add_inargs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::TreeNode >&
      inargs() const;

  // optional string functionName = 1;
  bool has_functionname() const;
  private:
  bool _internal_has_functionname() const;
  public:
  void clear_functionname();
  const std::string& functionname() const;
  void set_functionname(const std::string& value);
  void set_functionname(std::string&& value);
  void set_functionname(const char* value);
  void set_functionname(const char* value, size_t size);
  std::string* mutable_functionname();
  std::string* release_functionname();
  void set_allocated_functionname(std::string* functionname);
  private:
  const std::string& _internal_functionname() const;
  void _internal_set_functionname(const std::string& value);
  std::string* _internal_mutable_functionname();
  public:

  // optional .types.ExtGandivaType returnType = 3;
  bool has_returntype() const;
  private:
  bool _internal_has_returntype() const;
  public:
  void clear_returntype();
  const ::types::ExtGandivaType& returntype() const;
  ::types::ExtGandivaType* release_returntype();
  ::types::ExtGandivaType* mutable_returntype();
  void set_allocated_returntype(::types::ExtGandivaType* returntype);
  private:
  const ::types::ExtGandivaType& _internal_returntype() const;
  ::types::ExtGandivaType* _internal_mutable_returntype();
  public:

  // @@protoc_insertion_point(class_scope:types.FunctionNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::TreeNode > inargs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr functionname_;
  ::types::ExtGandivaType* returntype_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class IfNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.IfNode) */ {
 public:
  IfNode();
  virtual ~IfNode();

  IfNode(const IfNode& from);
  IfNode(IfNode&& from) noexcept
    : IfNode() {
    *this = ::std::move(from);
  }

  inline IfNode& operator=(const IfNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline IfNode& operator=(IfNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IfNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IfNode* internal_default_instance() {
    return reinterpret_cast<const IfNode*>(
               &_IfNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IfNode& a, IfNode& b) {
    a.Swap(&b);
  }
  inline void Swap(IfNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IfNode* New() const final {
    return CreateMaybeMessage<IfNode>(nullptr);
  }

  IfNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IfNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IfNode& from);
  void MergeFrom(const IfNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IfNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.IfNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCondFieldNumber = 1,
    kThenNodeFieldNumber = 2,
    kElseNodeFieldNumber = 3,
    kReturnTypeFieldNumber = 4,
  };
  // optional .types.TreeNode cond = 1;
  bool has_cond() const;
  private:
  bool _internal_has_cond() const;
  public:
  void clear_cond();
  const ::types::TreeNode& cond() const;
  ::types::TreeNode* release_cond();
  ::types::TreeNode* mutable_cond();
  void set_allocated_cond(::types::TreeNode* cond);
  private:
  const ::types::TreeNode& _internal_cond() const;
  ::types::TreeNode* _internal_mutable_cond();
  public:

  // optional .types.TreeNode thenNode = 2;
  bool has_thennode() const;
  private:
  bool _internal_has_thennode() const;
  public:
  void clear_thennode();
  const ::types::TreeNode& thennode() const;
  ::types::TreeNode* release_thennode();
  ::types::TreeNode* mutable_thennode();
  void set_allocated_thennode(::types::TreeNode* thennode);
  private:
  const ::types::TreeNode& _internal_thennode() const;
  ::types::TreeNode* _internal_mutable_thennode();
  public:

  // optional .types.TreeNode elseNode = 3;
  bool has_elsenode() const;
  private:
  bool _internal_has_elsenode() const;
  public:
  void clear_elsenode();
  const ::types::TreeNode& elsenode() const;
  ::types::TreeNode* release_elsenode();
  ::types::TreeNode* mutable_elsenode();
  void set_allocated_elsenode(::types::TreeNode* elsenode);
  private:
  const ::types::TreeNode& _internal_elsenode() const;
  ::types::TreeNode* _internal_mutable_elsenode();
  public:

  // optional .types.ExtGandivaType returnType = 4;
  bool has_returntype() const;
  private:
  bool _internal_has_returntype() const;
  public:
  void clear_returntype();
  const ::types::ExtGandivaType& returntype() const;
  ::types::ExtGandivaType* release_returntype();
  ::types::ExtGandivaType* mutable_returntype();
  void set_allocated_returntype(::types::ExtGandivaType* returntype);
  private:
  const ::types::ExtGandivaType& _internal_returntype() const;
  ::types::ExtGandivaType* _internal_mutable_returntype();
  public:

  // @@protoc_insertion_point(class_scope:types.IfNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::types::TreeNode* cond_;
  ::types::TreeNode* thennode_;
  ::types::TreeNode* elsenode_;
  ::types::ExtGandivaType* returntype_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class AndNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.AndNode) */ {
 public:
  AndNode();
  virtual ~AndNode();

  AndNode(const AndNode& from);
  AndNode(AndNode&& from) noexcept
    : AndNode() {
    *this = ::std::move(from);
  }

  inline AndNode& operator=(const AndNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndNode& operator=(AndNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AndNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AndNode* internal_default_instance() {
    return reinterpret_cast<const AndNode*>(
               &_AndNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AndNode& a, AndNode& b) {
    a.Swap(&b);
  }
  inline void Swap(AndNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AndNode* New() const final {
    return CreateMaybeMessage<AndNode>(nullptr);
  }

  AndNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AndNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AndNode& from);
  void MergeFrom(const AndNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AndNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.AndNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 1,
  };
  // repeated .types.TreeNode args = 1;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  ::types::TreeNode* mutable_args(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::TreeNode >*
      mutable_args();
  private:
  const ::types::TreeNode& _internal_args(int index) const;
  ::types::TreeNode* _internal_add_args();
  public:
  const ::types::TreeNode& args(int index) const;
  ::types::TreeNode* add_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::TreeNode >&
      args() const;

  // @@protoc_insertion_point(class_scope:types.AndNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::TreeNode > args_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class OrNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.OrNode) */ {
 public:
  OrNode();
  virtual ~OrNode();

  OrNode(const OrNode& from);
  OrNode(OrNode&& from) noexcept
    : OrNode() {
    *this = ::std::move(from);
  }

  inline OrNode& operator=(const OrNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrNode& operator=(OrNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrNode* internal_default_instance() {
    return reinterpret_cast<const OrNode*>(
               &_OrNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OrNode& a, OrNode& b) {
    a.Swap(&b);
  }
  inline void Swap(OrNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrNode* New() const final {
    return CreateMaybeMessage<OrNode>(nullptr);
  }

  OrNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrNode& from);
  void MergeFrom(const OrNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.OrNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 1,
  };
  // repeated .types.TreeNode args = 1;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  ::types::TreeNode* mutable_args(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::TreeNode >*
      mutable_args();
  private:
  const ::types::TreeNode& _internal_args(int index) const;
  ::types::TreeNode* _internal_add_args();
  public:
  const ::types::TreeNode& args(int index) const;
  ::types::TreeNode* add_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::TreeNode >&
      args() const;

  // @@protoc_insertion_point(class_scope:types.OrNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::TreeNode > args_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class NullNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.NullNode) */ {
 public:
  NullNode();
  virtual ~NullNode();

  NullNode(const NullNode& from);
  NullNode(NullNode&& from) noexcept
    : NullNode() {
    *this = ::std::move(from);
  }

  inline NullNode& operator=(const NullNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline NullNode& operator=(NullNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NullNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NullNode* internal_default_instance() {
    return reinterpret_cast<const NullNode*>(
               &_NullNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NullNode& a, NullNode& b) {
    a.Swap(&b);
  }
  inline void Swap(NullNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NullNode* New() const final {
    return CreateMaybeMessage<NullNode>(nullptr);
  }

  NullNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NullNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NullNode& from);
  void MergeFrom(const NullNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NullNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.NullNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // optional .types.ExtGandivaType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::types::ExtGandivaType& type() const;
  ::types::ExtGandivaType* release_type();
  ::types::ExtGandivaType* mutable_type();
  void set_allocated_type(::types::ExtGandivaType* type);
  private:
  const ::types::ExtGandivaType& _internal_type() const;
  ::types::ExtGandivaType* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:types.NullNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::types::ExtGandivaType* type_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class IntNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.IntNode) */ {
 public:
  IntNode();
  virtual ~IntNode();

  IntNode(const IntNode& from);
  IntNode(IntNode&& from) noexcept
    : IntNode() {
    *this = ::std::move(from);
  }

  inline IntNode& operator=(const IntNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntNode& operator=(IntNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntNode* internal_default_instance() {
    return reinterpret_cast<const IntNode*>(
               &_IntNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(IntNode& a, IntNode& b) {
    a.Swap(&b);
  }
  inline void Swap(IntNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntNode* New() const final {
    return CreateMaybeMessage<IntNode>(nullptr);
  }

  IntNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntNode& from);
  void MergeFrom(const IntNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.IntNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // optional int32 value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:types.IntNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class FloatNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.FloatNode) */ {
 public:
  FloatNode();
  virtual ~FloatNode();

  FloatNode(const FloatNode& from);
  FloatNode(FloatNode&& from) noexcept
    : FloatNode() {
    *this = ::std::move(from);
  }

  inline FloatNode& operator=(const FloatNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatNode& operator=(FloatNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FloatNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FloatNode* internal_default_instance() {
    return reinterpret_cast<const FloatNode*>(
               &_FloatNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FloatNode& a, FloatNode& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FloatNode* New() const final {
    return CreateMaybeMessage<FloatNode>(nullptr);
  }

  FloatNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FloatNode& from);
  void MergeFrom(const FloatNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.FloatNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // optional float value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:types.FloatNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float value_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class DoubleNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.DoubleNode) */ {
 public:
  DoubleNode();
  virtual ~DoubleNode();

  DoubleNode(const DoubleNode& from);
  DoubleNode(DoubleNode&& from) noexcept
    : DoubleNode() {
    *this = ::std::move(from);
  }

  inline DoubleNode& operator=(const DoubleNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleNode& operator=(DoubleNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoubleNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoubleNode* internal_default_instance() {
    return reinterpret_cast<const DoubleNode*>(
               &_DoubleNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DoubleNode& a, DoubleNode& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleNode* New() const final {
    return CreateMaybeMessage<DoubleNode>(nullptr);
  }

  DoubleNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleNode& from);
  void MergeFrom(const DoubleNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.DoubleNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // optional double value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:types.DoubleNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double value_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class BooleanNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.BooleanNode) */ {
 public:
  BooleanNode();
  virtual ~BooleanNode();

  BooleanNode(const BooleanNode& from);
  BooleanNode(BooleanNode&& from) noexcept
    : BooleanNode() {
    *this = ::std::move(from);
  }

  inline BooleanNode& operator=(const BooleanNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline BooleanNode& operator=(BooleanNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BooleanNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BooleanNode* internal_default_instance() {
    return reinterpret_cast<const BooleanNode*>(
               &_BooleanNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BooleanNode& a, BooleanNode& b) {
    a.Swap(&b);
  }
  inline void Swap(BooleanNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BooleanNode* New() const final {
    return CreateMaybeMessage<BooleanNode>(nullptr);
  }

  BooleanNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BooleanNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BooleanNode& from);
  void MergeFrom(const BooleanNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BooleanNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.BooleanNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // optional bool value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:types.BooleanNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool value_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class LongNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.LongNode) */ {
 public:
  LongNode();
  virtual ~LongNode();

  LongNode(const LongNode& from);
  LongNode(LongNode&& from) noexcept
    : LongNode() {
    *this = ::std::move(from);
  }

  inline LongNode& operator=(const LongNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline LongNode& operator=(LongNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LongNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LongNode* internal_default_instance() {
    return reinterpret_cast<const LongNode*>(
               &_LongNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(LongNode& a, LongNode& b) {
    a.Swap(&b);
  }
  inline void Swap(LongNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LongNode* New() const final {
    return CreateMaybeMessage<LongNode>(nullptr);
  }

  LongNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LongNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LongNode& from);
  void MergeFrom(const LongNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LongNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.LongNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // optional int64 value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:types.LongNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class StringNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.StringNode) */ {
 public:
  StringNode();
  virtual ~StringNode();

  StringNode(const StringNode& from);
  StringNode(StringNode&& from) noexcept
    : StringNode() {
    *this = ::std::move(from);
  }

  inline StringNode& operator=(const StringNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringNode& operator=(StringNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StringNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringNode* internal_default_instance() {
    return reinterpret_cast<const StringNode*>(
               &_StringNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(StringNode& a, StringNode& b) {
    a.Swap(&b);
  }
  inline void Swap(StringNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringNode* New() const final {
    return CreateMaybeMessage<StringNode>(nullptr);
  }

  StringNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringNode& from);
  void MergeFrom(const StringNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.StringNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // optional bytes value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:types.StringNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class BinaryNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.BinaryNode) */ {
 public:
  BinaryNode();
  virtual ~BinaryNode();

  BinaryNode(const BinaryNode& from);
  BinaryNode(BinaryNode&& from) noexcept
    : BinaryNode() {
    *this = ::std::move(from);
  }

  inline BinaryNode& operator=(const BinaryNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryNode& operator=(BinaryNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BinaryNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BinaryNode* internal_default_instance() {
    return reinterpret_cast<const BinaryNode*>(
               &_BinaryNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(BinaryNode& a, BinaryNode& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BinaryNode* New() const final {
    return CreateMaybeMessage<BinaryNode>(nullptr);
  }

  BinaryNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BinaryNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BinaryNode& from);
  void MergeFrom(const BinaryNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.BinaryNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // optional bytes value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:types.BinaryNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class DecimalNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.DecimalNode) */ {
 public:
  DecimalNode();
  virtual ~DecimalNode();

  DecimalNode(const DecimalNode& from);
  DecimalNode(DecimalNode&& from) noexcept
    : DecimalNode() {
    *this = ::std::move(from);
  }

  inline DecimalNode& operator=(const DecimalNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecimalNode& operator=(DecimalNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DecimalNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DecimalNode* internal_default_instance() {
    return reinterpret_cast<const DecimalNode*>(
               &_DecimalNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DecimalNode& a, DecimalNode& b) {
    a.Swap(&b);
  }
  inline void Swap(DecimalNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DecimalNode* New() const final {
    return CreateMaybeMessage<DecimalNode>(nullptr);
  }

  DecimalNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DecimalNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DecimalNode& from);
  void MergeFrom(const DecimalNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecimalNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.DecimalNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kPrecisionFieldNumber = 2,
    kScaleFieldNumber = 3,
  };
  // optional string value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional int32 precision = 2;
  bool has_precision() const;
  private:
  bool _internal_has_precision() const;
  public:
  void clear_precision();
  ::PROTOBUF_NAMESPACE_ID::int32 precision() const;
  void set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_precision() const;
  void _internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 scale = 3;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  ::PROTOBUF_NAMESPACE_ID::int32 scale() const;
  void set_scale(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scale() const;
  void _internal_set_scale(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:types.DecimalNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 precision_;
  ::PROTOBUF_NAMESPACE_ID::int32 scale_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class TreeNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.TreeNode) */ {
 public:
  TreeNode();
  virtual ~TreeNode();

  TreeNode(const TreeNode& from);
  TreeNode(TreeNode&& from) noexcept
    : TreeNode() {
    *this = ::std::move(from);
  }

  inline TreeNode& operator=(const TreeNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline TreeNode& operator=(TreeNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TreeNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TreeNode* internal_default_instance() {
    return reinterpret_cast<const TreeNode*>(
               &_TreeNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TreeNode& a, TreeNode& b) {
    a.Swap(&b);
  }
  inline void Swap(TreeNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TreeNode* New() const final {
    return CreateMaybeMessage<TreeNode>(nullptr);
  }

  TreeNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TreeNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TreeNode& from);
  void MergeFrom(const TreeNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TreeNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.TreeNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldNodeFieldNumber = 1,
    kFnNodeFieldNumber = 2,
    kIfNodeFieldNumber = 6,
    kAndNodeFieldNumber = 7,
    kOrNodeFieldNumber = 8,
    kNullNodeFieldNumber = 11,
    kIntNodeFieldNumber = 12,
    kFloatNodeFieldNumber = 13,
    kLongNodeFieldNumber = 14,
    kBooleanNodeFieldNumber = 15,
    kDoubleNodeFieldNumber = 16,
    kStringNodeFieldNumber = 17,
    kBinaryNodeFieldNumber = 18,
    kDecimalNodeFieldNumber = 19,
    kInNodeFieldNumber = 21,
  };
  // optional .types.FieldNode fieldNode = 1;
  bool has_fieldnode() const;
  private:
  bool _internal_has_fieldnode() const;
  public:
  void clear_fieldnode();
  const ::types::FieldNode& fieldnode() const;
  ::types::FieldNode* release_fieldnode();
  ::types::FieldNode* mutable_fieldnode();
  void set_allocated_fieldnode(::types::FieldNode* fieldnode);
  private:
  const ::types::FieldNode& _internal_fieldnode() const;
  ::types::FieldNode* _internal_mutable_fieldnode();
  public:

  // optional .types.FunctionNode fnNode = 2;
  bool has_fnnode() const;
  private:
  bool _internal_has_fnnode() const;
  public:
  void clear_fnnode();
  const ::types::FunctionNode& fnnode() const;
  ::types::FunctionNode* release_fnnode();
  ::types::FunctionNode* mutable_fnnode();
  void set_allocated_fnnode(::types::FunctionNode* fnnode);
  private:
  const ::types::FunctionNode& _internal_fnnode() const;
  ::types::FunctionNode* _internal_mutable_fnnode();
  public:

  // optional .types.IfNode ifNode = 6;
  bool has_ifnode() const;
  private:
  bool _internal_has_ifnode() const;
  public:
  void clear_ifnode();
  const ::types::IfNode& ifnode() const;
  ::types::IfNode* release_ifnode();
  ::types::IfNode* mutable_ifnode();
  void set_allocated_ifnode(::types::IfNode* ifnode);
  private:
  const ::types::IfNode& _internal_ifnode() const;
  ::types::IfNode* _internal_mutable_ifnode();
  public:

  // optional .types.AndNode andNode = 7;
  bool has_andnode() const;
  private:
  bool _internal_has_andnode() const;
  public:
  void clear_andnode();
  const ::types::AndNode& andnode() const;
  ::types::AndNode* release_andnode();
  ::types::AndNode* mutable_andnode();
  void set_allocated_andnode(::types::AndNode* andnode);
  private:
  const ::types::AndNode& _internal_andnode() const;
  ::types::AndNode* _internal_mutable_andnode();
  public:

  // optional .types.OrNode orNode = 8;
  bool has_ornode() const;
  private:
  bool _internal_has_ornode() const;
  public:
  void clear_ornode();
  const ::types::OrNode& ornode() const;
  ::types::OrNode* release_ornode();
  ::types::OrNode* mutable_ornode();
  void set_allocated_ornode(::types::OrNode* ornode);
  private:
  const ::types::OrNode& _internal_ornode() const;
  ::types::OrNode* _internal_mutable_ornode();
  public:

  // optional .types.NullNode nullNode = 11;
  bool has_nullnode() const;
  private:
  bool _internal_has_nullnode() const;
  public:
  void clear_nullnode();
  const ::types::NullNode& nullnode() const;
  ::types::NullNode* release_nullnode();
  ::types::NullNode* mutable_nullnode();
  void set_allocated_nullnode(::types::NullNode* nullnode);
  private:
  const ::types::NullNode& _internal_nullnode() const;
  ::types::NullNode* _internal_mutable_nullnode();
  public:

  // optional .types.IntNode intNode = 12;
  bool has_intnode() const;
  private:
  bool _internal_has_intnode() const;
  public:
  void clear_intnode();
  const ::types::IntNode& intnode() const;
  ::types::IntNode* release_intnode();
  ::types::IntNode* mutable_intnode();
  void set_allocated_intnode(::types::IntNode* intnode);
  private:
  const ::types::IntNode& _internal_intnode() const;
  ::types::IntNode* _internal_mutable_intnode();
  public:

  // optional .types.FloatNode floatNode = 13;
  bool has_floatnode() const;
  private:
  bool _internal_has_floatnode() const;
  public:
  void clear_floatnode();
  const ::types::FloatNode& floatnode() const;
  ::types::FloatNode* release_floatnode();
  ::types::FloatNode* mutable_floatnode();
  void set_allocated_floatnode(::types::FloatNode* floatnode);
  private:
  const ::types::FloatNode& _internal_floatnode() const;
  ::types::FloatNode* _internal_mutable_floatnode();
  public:

  // optional .types.LongNode longNode = 14;
  bool has_longnode() const;
  private:
  bool _internal_has_longnode() const;
  public:
  void clear_longnode();
  const ::types::LongNode& longnode() const;
  ::types::LongNode* release_longnode();
  ::types::LongNode* mutable_longnode();
  void set_allocated_longnode(::types::LongNode* longnode);
  private:
  const ::types::LongNode& _internal_longnode() const;
  ::types::LongNode* _internal_mutable_longnode();
  public:

  // optional .types.BooleanNode booleanNode = 15;
  bool has_booleannode() const;
  private:
  bool _internal_has_booleannode() const;
  public:
  void clear_booleannode();
  const ::types::BooleanNode& booleannode() const;
  ::types::BooleanNode* release_booleannode();
  ::types::BooleanNode* mutable_booleannode();
  void set_allocated_booleannode(::types::BooleanNode* booleannode);
  private:
  const ::types::BooleanNode& _internal_booleannode() const;
  ::types::BooleanNode* _internal_mutable_booleannode();
  public:

  // optional .types.DoubleNode doubleNode = 16;
  bool has_doublenode() const;
  private:
  bool _internal_has_doublenode() const;
  public:
  void clear_doublenode();
  const ::types::DoubleNode& doublenode() const;
  ::types::DoubleNode* release_doublenode();
  ::types::DoubleNode* mutable_doublenode();
  void set_allocated_doublenode(::types::DoubleNode* doublenode);
  private:
  const ::types::DoubleNode& _internal_doublenode() const;
  ::types::DoubleNode* _internal_mutable_doublenode();
  public:

  // optional .types.StringNode stringNode = 17;
  bool has_stringnode() const;
  private:
  bool _internal_has_stringnode() const;
  public:
  void clear_stringnode();
  const ::types::StringNode& stringnode() const;
  ::types::StringNode* release_stringnode();
  ::types::StringNode* mutable_stringnode();
  void set_allocated_stringnode(::types::StringNode* stringnode);
  private:
  const ::types::StringNode& _internal_stringnode() const;
  ::types::StringNode* _internal_mutable_stringnode();
  public:

  // optional .types.BinaryNode binaryNode = 18;
  bool has_binarynode() const;
  private:
  bool _internal_has_binarynode() const;
  public:
  void clear_binarynode();
  const ::types::BinaryNode& binarynode() const;
  ::types::BinaryNode* release_binarynode();
  ::types::BinaryNode* mutable_binarynode();
  void set_allocated_binarynode(::types::BinaryNode* binarynode);
  private:
  const ::types::BinaryNode& _internal_binarynode() const;
  ::types::BinaryNode* _internal_mutable_binarynode();
  public:

  // optional .types.DecimalNode decimalNode = 19;
  bool has_decimalnode() const;
  private:
  bool _internal_has_decimalnode() const;
  public:
  void clear_decimalnode();
  const ::types::DecimalNode& decimalnode() const;
  ::types::DecimalNode* release_decimalnode();
  ::types::DecimalNode* mutable_decimalnode();
  void set_allocated_decimalnode(::types::DecimalNode* decimalnode);
  private:
  const ::types::DecimalNode& _internal_decimalnode() const;
  ::types::DecimalNode* _internal_mutable_decimalnode();
  public:

  // optional .types.InNode inNode = 21;
  bool has_innode() const;
  private:
  bool _internal_has_innode() const;
  public:
  void clear_innode();
  const ::types::InNode& innode() const;
  ::types::InNode* release_innode();
  ::types::InNode* mutable_innode();
  void set_allocated_innode(::types::InNode* innode);
  private:
  const ::types::InNode& _internal_innode() const;
  ::types::InNode* _internal_mutable_innode();
  public:

  // @@protoc_insertion_point(class_scope:types.TreeNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::types::FieldNode* fieldnode_;
  ::types::FunctionNode* fnnode_;
  ::types::IfNode* ifnode_;
  ::types::AndNode* andnode_;
  ::types::OrNode* ornode_;
  ::types::NullNode* nullnode_;
  ::types::IntNode* intnode_;
  ::types::FloatNode* floatnode_;
  ::types::LongNode* longnode_;
  ::types::BooleanNode* booleannode_;
  ::types::DoubleNode* doublenode_;
  ::types::StringNode* stringnode_;
  ::types::BinaryNode* binarynode_;
  ::types::DecimalNode* decimalnode_;
  ::types::InNode* innode_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class ExpressionRoot :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.ExpressionRoot) */ {
 public:
  ExpressionRoot();
  virtual ~ExpressionRoot();

  ExpressionRoot(const ExpressionRoot& from);
  ExpressionRoot(ExpressionRoot&& from) noexcept
    : ExpressionRoot() {
    *this = ::std::move(from);
  }

  inline ExpressionRoot& operator=(const ExpressionRoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpressionRoot& operator=(ExpressionRoot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExpressionRoot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExpressionRoot* internal_default_instance() {
    return reinterpret_cast<const ExpressionRoot*>(
               &_ExpressionRoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ExpressionRoot& a, ExpressionRoot& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpressionRoot* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExpressionRoot* New() const final {
    return CreateMaybeMessage<ExpressionRoot>(nullptr);
  }

  ExpressionRoot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExpressionRoot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExpressionRoot& from);
  void MergeFrom(const ExpressionRoot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpressionRoot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.ExpressionRoot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootFieldNumber = 1,
    kResultTypeFieldNumber = 2,
  };
  // optional .types.TreeNode root = 1;
  bool has_root() const;
  private:
  bool _internal_has_root() const;
  public:
  void clear_root();
  const ::types::TreeNode& root() const;
  ::types::TreeNode* release_root();
  ::types::TreeNode* mutable_root();
  void set_allocated_root(::types::TreeNode* root);
  private:
  const ::types::TreeNode& _internal_root() const;
  ::types::TreeNode* _internal_mutable_root();
  public:

  // optional .types.Field resultType = 2;
  bool has_resulttype() const;
  private:
  bool _internal_has_resulttype() const;
  public:
  void clear_resulttype();
  const ::types::Field& resulttype() const;
  ::types::Field* release_resulttype();
  ::types::Field* mutable_resulttype();
  void set_allocated_resulttype(::types::Field* resulttype);
  private:
  const ::types::Field& _internal_resulttype() const;
  ::types::Field* _internal_mutable_resulttype();
  public:

  // @@protoc_insertion_point(class_scope:types.ExpressionRoot)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::types::TreeNode* root_;
  ::types::Field* resulttype_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class ExpressionList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.ExpressionList) */ {
 public:
  ExpressionList();
  virtual ~ExpressionList();

  ExpressionList(const ExpressionList& from);
  ExpressionList(ExpressionList&& from) noexcept
    : ExpressionList() {
    *this = ::std::move(from);
  }

  inline ExpressionList& operator=(const ExpressionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpressionList& operator=(ExpressionList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExpressionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExpressionList* internal_default_instance() {
    return reinterpret_cast<const ExpressionList*>(
               &_ExpressionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ExpressionList& a, ExpressionList& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpressionList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExpressionList* New() const final {
    return CreateMaybeMessage<ExpressionList>(nullptr);
  }

  ExpressionList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExpressionList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExpressionList& from);
  void MergeFrom(const ExpressionList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpressionList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.ExpressionList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExprsFieldNumber = 2,
  };
  // repeated .types.ExpressionRoot exprs = 2;
  int exprs_size() const;
  private:
  int _internal_exprs_size() const;
  public:
  void clear_exprs();
  ::types::ExpressionRoot* mutable_exprs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::ExpressionRoot >*
      mutable_exprs();
  private:
  const ::types::ExpressionRoot& _internal_exprs(int index) const;
  ::types::ExpressionRoot* _internal_add_exprs();
  public:
  const ::types::ExpressionRoot& exprs(int index) const;
  ::types::ExpressionRoot* add_exprs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::ExpressionRoot >&
      exprs() const;

  // @@protoc_insertion_point(class_scope:types.ExpressionList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::ExpressionRoot > exprs_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class Condition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.Condition) */ {
 public:
  Condition();
  virtual ~Condition();

  Condition(const Condition& from);
  Condition(Condition&& from) noexcept
    : Condition() {
    *this = ::std::move(from);
  }

  inline Condition& operator=(const Condition& from) {
    CopyFrom(from);
    return *this;
  }
  inline Condition& operator=(Condition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Condition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Condition* internal_default_instance() {
    return reinterpret_cast<const Condition*>(
               &_Condition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Condition& a, Condition& b) {
    a.Swap(&b);
  }
  inline void Swap(Condition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Condition* New() const final {
    return CreateMaybeMessage<Condition>(nullptr);
  }

  Condition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Condition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Condition& from);
  void MergeFrom(const Condition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Condition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.Condition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootFieldNumber = 1,
  };
  // optional .types.TreeNode root = 1;
  bool has_root() const;
  private:
  bool _internal_has_root() const;
  public:
  void clear_root();
  const ::types::TreeNode& root() const;
  ::types::TreeNode* release_root();
  ::types::TreeNode* mutable_root();
  void set_allocated_root(::types::TreeNode* root);
  private:
  const ::types::TreeNode& _internal_root() const;
  ::types::TreeNode* _internal_mutable_root();
  public:

  // @@protoc_insertion_point(class_scope:types.Condition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::types::TreeNode* root_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class Schema :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.Schema) */ {
 public:
  Schema();
  virtual ~Schema();

  Schema(const Schema& from);
  Schema(Schema&& from) noexcept
    : Schema() {
    *this = ::std::move(from);
  }

  inline Schema& operator=(const Schema& from) {
    CopyFrom(from);
    return *this;
  }
  inline Schema& operator=(Schema&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Schema& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Schema* internal_default_instance() {
    return reinterpret_cast<const Schema*>(
               &_Schema_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Schema& a, Schema& b) {
    a.Swap(&b);
  }
  inline void Swap(Schema* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Schema* New() const final {
    return CreateMaybeMessage<Schema>(nullptr);
  }

  Schema* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Schema>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Schema& from);
  void MergeFrom(const Schema& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Schema* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.Schema";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnsFieldNumber = 1,
  };
  // repeated .types.Field columns = 1;
  int columns_size() const;
  private:
  int _internal_columns_size() const;
  public:
  void clear_columns();
  ::types::Field* mutable_columns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Field >*
      mutable_columns();
  private:
  const ::types::Field& _internal_columns(int index) const;
  ::types::Field* _internal_add_columns();
  public:
  const ::types::Field& columns(int index) const;
  ::types::Field* add_columns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Field >&
      columns() const;

  // @@protoc_insertion_point(class_scope:types.Schema)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Field > columns_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class GandivaDataTypes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.GandivaDataTypes) */ {
 public:
  GandivaDataTypes();
  virtual ~GandivaDataTypes();

  GandivaDataTypes(const GandivaDataTypes& from);
  GandivaDataTypes(GandivaDataTypes&& from) noexcept
    : GandivaDataTypes() {
    *this = ::std::move(from);
  }

  inline GandivaDataTypes& operator=(const GandivaDataTypes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GandivaDataTypes& operator=(GandivaDataTypes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GandivaDataTypes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GandivaDataTypes* internal_default_instance() {
    return reinterpret_cast<const GandivaDataTypes*>(
               &_GandivaDataTypes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GandivaDataTypes& a, GandivaDataTypes& b) {
    a.Swap(&b);
  }
  inline void Swap(GandivaDataTypes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GandivaDataTypes* New() const final {
    return CreateMaybeMessage<GandivaDataTypes>(nullptr);
  }

  GandivaDataTypes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GandivaDataTypes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GandivaDataTypes& from);
  void MergeFrom(const GandivaDataTypes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GandivaDataTypes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.GandivaDataTypes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataTypeFieldNumber = 1,
  };
  // repeated .types.ExtGandivaType dataType = 1;
  int datatype_size() const;
  private:
  int _internal_datatype_size() const;
  public:
  void clear_datatype();
  ::types::ExtGandivaType* mutable_datatype(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::ExtGandivaType >*
      mutable_datatype();
  private:
  const ::types::ExtGandivaType& _internal_datatype(int index) const;
  ::types::ExtGandivaType* _internal_add_datatype();
  public:
  const ::types::ExtGandivaType& datatype(int index) const;
  ::types::ExtGandivaType* add_datatype();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::ExtGandivaType >&
      datatype() const;

  // @@protoc_insertion_point(class_scope:types.GandivaDataTypes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::ExtGandivaType > datatype_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class GandivaFunctions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.GandivaFunctions) */ {
 public:
  GandivaFunctions();
  virtual ~GandivaFunctions();

  GandivaFunctions(const GandivaFunctions& from);
  GandivaFunctions(GandivaFunctions&& from) noexcept
    : GandivaFunctions() {
    *this = ::std::move(from);
  }

  inline GandivaFunctions& operator=(const GandivaFunctions& from) {
    CopyFrom(from);
    return *this;
  }
  inline GandivaFunctions& operator=(GandivaFunctions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GandivaFunctions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GandivaFunctions* internal_default_instance() {
    return reinterpret_cast<const GandivaFunctions*>(
               &_GandivaFunctions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GandivaFunctions& a, GandivaFunctions& b) {
    a.Swap(&b);
  }
  inline void Swap(GandivaFunctions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GandivaFunctions* New() const final {
    return CreateMaybeMessage<GandivaFunctions>(nullptr);
  }

  GandivaFunctions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GandivaFunctions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GandivaFunctions& from);
  void MergeFrom(const GandivaFunctions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GandivaFunctions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.GandivaFunctions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionFieldNumber = 1,
  };
  // repeated .types.FunctionSignature function = 1;
  int function_size() const;
  private:
  int _internal_function_size() const;
  public:
  void clear_function();
  ::types::FunctionSignature* mutable_function(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::FunctionSignature >*
      mutable_function();
  private:
  const ::types::FunctionSignature& _internal_function(int index) const;
  ::types::FunctionSignature* _internal_add_function();
  public:
  const ::types::FunctionSignature& function(int index) const;
  ::types::FunctionSignature* add_function();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::FunctionSignature >&
      function() const;

  // @@protoc_insertion_point(class_scope:types.GandivaFunctions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::FunctionSignature > function_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class FunctionSignature :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.FunctionSignature) */ {
 public:
  FunctionSignature();
  virtual ~FunctionSignature();

  FunctionSignature(const FunctionSignature& from);
  FunctionSignature(FunctionSignature&& from) noexcept
    : FunctionSignature() {
    *this = ::std::move(from);
  }

  inline FunctionSignature& operator=(const FunctionSignature& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionSignature& operator=(FunctionSignature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FunctionSignature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FunctionSignature* internal_default_instance() {
    return reinterpret_cast<const FunctionSignature*>(
               &_FunctionSignature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(FunctionSignature& a, FunctionSignature& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionSignature* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FunctionSignature* New() const final {
    return CreateMaybeMessage<FunctionSignature>(nullptr);
  }

  FunctionSignature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FunctionSignature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FunctionSignature& from);
  void MergeFrom(const FunctionSignature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionSignature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.FunctionSignature";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamTypesFieldNumber = 3,
    kNameFieldNumber = 1,
    kReturnTypeFieldNumber = 2,
  };
  // repeated .types.ExtGandivaType paramTypes = 3;
  int paramtypes_size() const;
  private:
  int _internal_paramtypes_size() const;
  public:
  void clear_paramtypes();
  ::types::ExtGandivaType* mutable_paramtypes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::ExtGandivaType >*
      mutable_paramtypes();
  private:
  const ::types::ExtGandivaType& _internal_paramtypes(int index) const;
  ::types::ExtGandivaType* _internal_add_paramtypes();
  public:
  const ::types::ExtGandivaType& paramtypes(int index) const;
  ::types::ExtGandivaType* add_paramtypes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::ExtGandivaType >&
      paramtypes() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .types.ExtGandivaType returnType = 2;
  bool has_returntype() const;
  private:
  bool _internal_has_returntype() const;
  public:
  void clear_returntype();
  const ::types::ExtGandivaType& returntype() const;
  ::types::ExtGandivaType* release_returntype();
  ::types::ExtGandivaType* mutable_returntype();
  void set_allocated_returntype(::types::ExtGandivaType* returntype);
  private:
  const ::types::ExtGandivaType& _internal_returntype() const;
  ::types::ExtGandivaType* _internal_mutable_returntype();
  public:

  // @@protoc_insertion_point(class_scope:types.FunctionSignature)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::ExtGandivaType > paramtypes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::types::ExtGandivaType* returntype_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class InNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.InNode) */ {
 public:
  InNode();
  virtual ~InNode();

  InNode(const InNode& from);
  InNode(InNode&& from) noexcept
    : InNode() {
    *this = ::std::move(from);
  }

  inline InNode& operator=(const InNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline InNode& operator=(InNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InNode* internal_default_instance() {
    return reinterpret_cast<const InNode*>(
               &_InNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(InNode& a, InNode& b) {
    a.Swap(&b);
  }
  inline void Swap(InNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InNode* New() const final {
    return CreateMaybeMessage<InNode>(nullptr);
  }

  InNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InNode& from);
  void MergeFrom(const InNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.InNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
    kIntValuesFieldNumber = 2,
    kLongValuesFieldNumber = 3,
    kStringValuesFieldNumber = 4,
    kBinaryValuesFieldNumber = 5,
  };
  // optional .types.FieldNode field = 1;
  bool has_field() const;
  private:
  bool _internal_has_field() const;
  public:
  void clear_field();
  const ::types::FieldNode& field() const;
  ::types::FieldNode* release_field();
  ::types::FieldNode* mutable_field();
  void set_allocated_field(::types::FieldNode* field);
  private:
  const ::types::FieldNode& _internal_field() const;
  ::types::FieldNode* _internal_mutable_field();
  public:

  // optional .types.IntConstants intValues = 2;
  bool has_intvalues() const;
  private:
  bool _internal_has_intvalues() const;
  public:
  void clear_intvalues();
  const ::types::IntConstants& intvalues() const;
  ::types::IntConstants* release_intvalues();
  ::types::IntConstants* mutable_intvalues();
  void set_allocated_intvalues(::types::IntConstants* intvalues);
  private:
  const ::types::IntConstants& _internal_intvalues() const;
  ::types::IntConstants* _internal_mutable_intvalues();
  public:

  // optional .types.LongConstants longValues = 3;
  bool has_longvalues() const;
  private:
  bool _internal_has_longvalues() const;
  public:
  void clear_longvalues();
  const ::types::LongConstants& longvalues() const;
  ::types::LongConstants* release_longvalues();
  ::types::LongConstants* mutable_longvalues();
  void set_allocated_longvalues(::types::LongConstants* longvalues);
  private:
  const ::types::LongConstants& _internal_longvalues() const;
  ::types::LongConstants* _internal_mutable_longvalues();
  public:

  // optional .types.StringConstants stringValues = 4;
  bool has_stringvalues() const;
  private:
  bool _internal_has_stringvalues() const;
  public:
  void clear_stringvalues();
  const ::types::StringConstants& stringvalues() const;
  ::types::StringConstants* release_stringvalues();
  ::types::StringConstants* mutable_stringvalues();
  void set_allocated_stringvalues(::types::StringConstants* stringvalues);
  private:
  const ::types::StringConstants& _internal_stringvalues() const;
  ::types::StringConstants* _internal_mutable_stringvalues();
  public:

  // optional .types.BinaryConstants binaryValues = 5;
  bool has_binaryvalues() const;
  private:
  bool _internal_has_binaryvalues() const;
  public:
  void clear_binaryvalues();
  const ::types::BinaryConstants& binaryvalues() const;
  ::types::BinaryConstants* release_binaryvalues();
  ::types::BinaryConstants* mutable_binaryvalues();
  void set_allocated_binaryvalues(::types::BinaryConstants* binaryvalues);
  private:
  const ::types::BinaryConstants& _internal_binaryvalues() const;
  ::types::BinaryConstants* _internal_mutable_binaryvalues();
  public:

  // @@protoc_insertion_point(class_scope:types.InNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::types::FieldNode* field_;
  ::types::IntConstants* intvalues_;
  ::types::LongConstants* longvalues_;
  ::types::StringConstants* stringvalues_;
  ::types::BinaryConstants* binaryvalues_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class IntConstants :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.IntConstants) */ {
 public:
  IntConstants();
  virtual ~IntConstants();

  IntConstants(const IntConstants& from);
  IntConstants(IntConstants&& from) noexcept
    : IntConstants() {
    *this = ::std::move(from);
  }

  inline IntConstants& operator=(const IntConstants& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntConstants& operator=(IntConstants&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntConstants& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntConstants* internal_default_instance() {
    return reinterpret_cast<const IntConstants*>(
               &_IntConstants_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(IntConstants& a, IntConstants& b) {
    a.Swap(&b);
  }
  inline void Swap(IntConstants* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntConstants* New() const final {
    return CreateMaybeMessage<IntConstants>(nullptr);
  }

  IntConstants* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntConstants>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntConstants& from);
  void MergeFrom(const IntConstants& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntConstants* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.IntConstants";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntValuesFieldNumber = 1,
  };
  // repeated .types.IntNode intValues = 1;
  int intvalues_size() const;
  private:
  int _internal_intvalues_size() const;
  public:
  void clear_intvalues();
  ::types::IntNode* mutable_intvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::IntNode >*
      mutable_intvalues();
  private:
  const ::types::IntNode& _internal_intvalues(int index) const;
  ::types::IntNode* _internal_add_intvalues();
  public:
  const ::types::IntNode& intvalues(int index) const;
  ::types::IntNode* add_intvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::IntNode >&
      intvalues() const;

  // @@protoc_insertion_point(class_scope:types.IntConstants)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::IntNode > intvalues_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class LongConstants :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.LongConstants) */ {
 public:
  LongConstants();
  virtual ~LongConstants();

  LongConstants(const LongConstants& from);
  LongConstants(LongConstants&& from) noexcept
    : LongConstants() {
    *this = ::std::move(from);
  }

  inline LongConstants& operator=(const LongConstants& from) {
    CopyFrom(from);
    return *this;
  }
  inline LongConstants& operator=(LongConstants&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LongConstants& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LongConstants* internal_default_instance() {
    return reinterpret_cast<const LongConstants*>(
               &_LongConstants_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(LongConstants& a, LongConstants& b) {
    a.Swap(&b);
  }
  inline void Swap(LongConstants* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LongConstants* New() const final {
    return CreateMaybeMessage<LongConstants>(nullptr);
  }

  LongConstants* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LongConstants>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LongConstants& from);
  void MergeFrom(const LongConstants& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LongConstants* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.LongConstants";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongValuesFieldNumber = 1,
  };
  // repeated .types.LongNode longValues = 1;
  int longvalues_size() const;
  private:
  int _internal_longvalues_size() const;
  public:
  void clear_longvalues();
  ::types::LongNode* mutable_longvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::LongNode >*
      mutable_longvalues();
  private:
  const ::types::LongNode& _internal_longvalues(int index) const;
  ::types::LongNode* _internal_add_longvalues();
  public:
  const ::types::LongNode& longvalues(int index) const;
  ::types::LongNode* add_longvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::LongNode >&
      longvalues() const;

  // @@protoc_insertion_point(class_scope:types.LongConstants)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::LongNode > longvalues_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class StringConstants :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.StringConstants) */ {
 public:
  StringConstants();
  virtual ~StringConstants();

  StringConstants(const StringConstants& from);
  StringConstants(StringConstants&& from) noexcept
    : StringConstants() {
    *this = ::std::move(from);
  }

  inline StringConstants& operator=(const StringConstants& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringConstants& operator=(StringConstants&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StringConstants& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringConstants* internal_default_instance() {
    return reinterpret_cast<const StringConstants*>(
               &_StringConstants_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(StringConstants& a, StringConstants& b) {
    a.Swap(&b);
  }
  inline void Swap(StringConstants* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringConstants* New() const final {
    return CreateMaybeMessage<StringConstants>(nullptr);
  }

  StringConstants* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringConstants>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringConstants& from);
  void MergeFrom(const StringConstants& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringConstants* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.StringConstants";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValuesFieldNumber = 1,
  };
  // repeated .types.StringNode stringValues = 1;
  int stringvalues_size() const;
  private:
  int _internal_stringvalues_size() const;
  public:
  void clear_stringvalues();
  ::types::StringNode* mutable_stringvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::StringNode >*
      mutable_stringvalues();
  private:
  const ::types::StringNode& _internal_stringvalues(int index) const;
  ::types::StringNode* _internal_add_stringvalues();
  public:
  const ::types::StringNode& stringvalues(int index) const;
  ::types::StringNode* add_stringvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::StringNode >&
      stringvalues() const;

  // @@protoc_insertion_point(class_scope:types.StringConstants)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::StringNode > stringvalues_;
  friend struct ::TableStruct_Types_2eproto;
};
// -------------------------------------------------------------------

class BinaryConstants :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.BinaryConstants) */ {
 public:
  BinaryConstants();
  virtual ~BinaryConstants();

  BinaryConstants(const BinaryConstants& from);
  BinaryConstants(BinaryConstants&& from) noexcept
    : BinaryConstants() {
    *this = ::std::move(from);
  }

  inline BinaryConstants& operator=(const BinaryConstants& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryConstants& operator=(BinaryConstants&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BinaryConstants& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BinaryConstants* internal_default_instance() {
    return reinterpret_cast<const BinaryConstants*>(
               &_BinaryConstants_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(BinaryConstants& a, BinaryConstants& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryConstants* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BinaryConstants* New() const final {
    return CreateMaybeMessage<BinaryConstants>(nullptr);
  }

  BinaryConstants* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BinaryConstants>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BinaryConstants& from);
  void MergeFrom(const BinaryConstants& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryConstants* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.BinaryConstants";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Types_2eproto);
    return ::descriptor_table_Types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBinaryValuesFieldNumber = 1,
  };
  // repeated .types.BinaryNode binaryValues = 1;
  int binaryvalues_size() const;
  private:
  int _internal_binaryvalues_size() const;
  public:
  void clear_binaryvalues();
  ::types::BinaryNode* mutable_binaryvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::BinaryNode >*
      mutable_binaryvalues();
  private:
  const ::types::BinaryNode& _internal_binaryvalues(int index) const;
  ::types::BinaryNode* _internal_add_binaryvalues();
  public:
  const ::types::BinaryNode& binaryvalues(int index) const;
  ::types::BinaryNode* add_binaryvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::BinaryNode >&
      binaryvalues() const;

  // @@protoc_insertion_point(class_scope:types.BinaryConstants)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::BinaryNode > binaryvalues_;
  friend struct ::TableStruct_Types_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExtGandivaType

// optional .types.GandivaType type = 1;
inline bool ExtGandivaType::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExtGandivaType::has_type() const {
  return _internal_has_type();
}
inline void ExtGandivaType::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::types::GandivaType ExtGandivaType::_internal_type() const {
  return static_cast< ::types::GandivaType >(type_);
}
inline ::types::GandivaType ExtGandivaType::type() const {
  // @@protoc_insertion_point(field_get:types.ExtGandivaType.type)
  return _internal_type();
}
inline void ExtGandivaType::_internal_set_type(::types::GandivaType value) {
  assert(::types::GandivaType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void ExtGandivaType::set_type(::types::GandivaType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:types.ExtGandivaType.type)
}

// optional uint32 width = 2;
inline bool ExtGandivaType::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ExtGandivaType::has_width() const {
  return _internal_has_width();
}
inline void ExtGandivaType::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExtGandivaType::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExtGandivaType::width() const {
  // @@protoc_insertion_point(field_get:types.ExtGandivaType.width)
  return _internal_width();
}
inline void ExtGandivaType::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  width_ = value;
}
inline void ExtGandivaType::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:types.ExtGandivaType.width)
}

// optional int32 precision = 3;
inline bool ExtGandivaType::_internal_has_precision() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ExtGandivaType::has_precision() const {
  return _internal_has_precision();
}
inline void ExtGandivaType::clear_precision() {
  precision_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExtGandivaType::_internal_precision() const {
  return precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExtGandivaType::precision() const {
  // @@protoc_insertion_point(field_get:types.ExtGandivaType.precision)
  return _internal_precision();
}
inline void ExtGandivaType::_internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  precision_ = value;
}
inline void ExtGandivaType::set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:types.ExtGandivaType.precision)
}

// optional int32 scale = 4;
inline bool ExtGandivaType::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ExtGandivaType::has_scale() const {
  return _internal_has_scale();
}
inline void ExtGandivaType::clear_scale() {
  scale_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExtGandivaType::_internal_scale() const {
  return scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExtGandivaType::scale() const {
  // @@protoc_insertion_point(field_get:types.ExtGandivaType.scale)
  return _internal_scale();
}
inline void ExtGandivaType::_internal_set_scale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  scale_ = value;
}
inline void ExtGandivaType::set_scale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:types.ExtGandivaType.scale)
}

// optional .types.DateUnit dateUnit = 5;
inline bool ExtGandivaType::_internal_has_dateunit() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ExtGandivaType::has_dateunit() const {
  return _internal_has_dateunit();
}
inline void ExtGandivaType::clear_dateunit() {
  dateunit_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::types::DateUnit ExtGandivaType::_internal_dateunit() const {
  return static_cast< ::types::DateUnit >(dateunit_);
}
inline ::types::DateUnit ExtGandivaType::dateunit() const {
  // @@protoc_insertion_point(field_get:types.ExtGandivaType.dateUnit)
  return _internal_dateunit();
}
inline void ExtGandivaType::_internal_set_dateunit(::types::DateUnit value) {
  assert(::types::DateUnit_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  dateunit_ = value;
}
inline void ExtGandivaType::set_dateunit(::types::DateUnit value) {
  _internal_set_dateunit(value);
  // @@protoc_insertion_point(field_set:types.ExtGandivaType.dateUnit)
}

// optional .types.TimeUnit timeUnit = 6;
inline bool ExtGandivaType::_internal_has_timeunit() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ExtGandivaType::has_timeunit() const {
  return _internal_has_timeunit();
}
inline void ExtGandivaType::clear_timeunit() {
  timeunit_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::types::TimeUnit ExtGandivaType::_internal_timeunit() const {
  return static_cast< ::types::TimeUnit >(timeunit_);
}
inline ::types::TimeUnit ExtGandivaType::timeunit() const {
  // @@protoc_insertion_point(field_get:types.ExtGandivaType.timeUnit)
  return _internal_timeunit();
}
inline void ExtGandivaType::_internal_set_timeunit(::types::TimeUnit value) {
  assert(::types::TimeUnit_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  timeunit_ = value;
}
inline void ExtGandivaType::set_timeunit(::types::TimeUnit value) {
  _internal_set_timeunit(value);
  // @@protoc_insertion_point(field_set:types.ExtGandivaType.timeUnit)
}

// optional string timeZone = 7;
inline bool ExtGandivaType::_internal_has_timezone() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExtGandivaType::has_timezone() const {
  return _internal_has_timezone();
}
inline void ExtGandivaType::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExtGandivaType::timezone() const {
  // @@protoc_insertion_point(field_get:types.ExtGandivaType.timeZone)
  return _internal_timezone();
}
inline void ExtGandivaType::set_timezone(const std::string& value) {
  _internal_set_timezone(value);
  // @@protoc_insertion_point(field_set:types.ExtGandivaType.timeZone)
}
inline std::string* ExtGandivaType::mutable_timezone() {
  // @@protoc_insertion_point(field_mutable:types.ExtGandivaType.timeZone)
  return _internal_mutable_timezone();
}
inline const std::string& ExtGandivaType::_internal_timezone() const {
  return timezone_.GetNoArena();
}
inline void ExtGandivaType::_internal_set_timezone(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timezone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ExtGandivaType::set_timezone(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timezone_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:types.ExtGandivaType.timeZone)
}
inline void ExtGandivaType::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timezone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:types.ExtGandivaType.timeZone)
}
inline void ExtGandivaType::set_timezone(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timezone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:types.ExtGandivaType.timeZone)
}
inline std::string* ExtGandivaType::_internal_mutable_timezone() {
  _has_bits_[0] |= 0x00000001u;
  return timezone_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExtGandivaType::release_timezone() {
  // @@protoc_insertion_point(field_release:types.ExtGandivaType.timeZone)
  if (!_internal_has_timezone()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timezone_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExtGandivaType::set_allocated_timezone(std::string* timezone) {
  if (timezone != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timezone_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:types.ExtGandivaType.timeZone)
}

// optional .types.IntervalType intervalType = 8;
inline bool ExtGandivaType::_internal_has_intervaltype() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ExtGandivaType::has_intervaltype() const {
  return _internal_has_intervaltype();
}
inline void ExtGandivaType::clear_intervaltype() {
  intervaltype_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::types::IntervalType ExtGandivaType::_internal_intervaltype() const {
  return static_cast< ::types::IntervalType >(intervaltype_);
}
inline ::types::IntervalType ExtGandivaType::intervaltype() const {
  // @@protoc_insertion_point(field_get:types.ExtGandivaType.intervalType)
  return _internal_intervaltype();
}
inline void ExtGandivaType::_internal_set_intervaltype(::types::IntervalType value) {
  assert(::types::IntervalType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  intervaltype_ = value;
}
inline void ExtGandivaType::set_intervaltype(::types::IntervalType value) {
  _internal_set_intervaltype(value);
  // @@protoc_insertion_point(field_set:types.ExtGandivaType.intervalType)
}

// -------------------------------------------------------------------

// Field

// optional string name = 1;
inline bool Field::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Field::has_name() const {
  return _internal_has_name();
}
inline void Field::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Field::name() const {
  // @@protoc_insertion_point(field_get:types.Field.name)
  return _internal_name();
}
inline void Field::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:types.Field.name)
}
inline std::string* Field::mutable_name() {
  // @@protoc_insertion_point(field_mutable:types.Field.name)
  return _internal_mutable_name();
}
inline const std::string& Field::_internal_name() const {
  return name_.GetNoArena();
}
inline void Field::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Field::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:types.Field.name)
}
inline void Field::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:types.Field.name)
}
inline void Field::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:types.Field.name)
}
inline std::string* Field::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Field::release_name() {
  // @@protoc_insertion_point(field_release:types.Field.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Field::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:types.Field.name)
}

// optional .types.ExtGandivaType type = 2;
inline bool Field::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || type_ != nullptr);
  return value;
}
inline bool Field::has_type() const {
  return _internal_has_type();
}
inline void Field::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::types::ExtGandivaType& Field::_internal_type() const {
  const ::types::ExtGandivaType* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::ExtGandivaType*>(
      &::types::_ExtGandivaType_default_instance_);
}
inline const ::types::ExtGandivaType& Field::type() const {
  // @@protoc_insertion_point(field_get:types.Field.type)
  return _internal_type();
}
inline ::types::ExtGandivaType* Field::release_type() {
  // @@protoc_insertion_point(field_release:types.Field.type)
  _has_bits_[0] &= ~0x00000002u;
  ::types::ExtGandivaType* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::types::ExtGandivaType* Field::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::ExtGandivaType>(GetArenaNoVirtual());
    type_ = p;
  }
  return type_;
}
inline ::types::ExtGandivaType* Field::mutable_type() {
  // @@protoc_insertion_point(field_mutable:types.Field.type)
  return _internal_mutable_type();
}
inline void Field::set_allocated_type(::types::ExtGandivaType* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:types.Field.type)
}

// optional bool nullable = 3;
inline bool Field::_internal_has_nullable() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Field::has_nullable() const {
  return _internal_has_nullable();
}
inline void Field::clear_nullable() {
  nullable_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Field::_internal_nullable() const {
  return nullable_;
}
inline bool Field::nullable() const {
  // @@protoc_insertion_point(field_get:types.Field.nullable)
  return _internal_nullable();
}
inline void Field::_internal_set_nullable(bool value) {
  _has_bits_[0] |= 0x00000004u;
  nullable_ = value;
}
inline void Field::set_nullable(bool value) {
  _internal_set_nullable(value);
  // @@protoc_insertion_point(field_set:types.Field.nullable)
}

// repeated .types.Field children = 4;
inline int Field::_internal_children_size() const {
  return children_.size();
}
inline int Field::children_size() const {
  return _internal_children_size();
}
inline void Field::clear_children() {
  children_.Clear();
}
inline ::types::Field* Field::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:types.Field.children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Field >*
Field::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:types.Field.children)
  return &children_;
}
inline const ::types::Field& Field::_internal_children(int index) const {
  return children_.Get(index);
}
inline const ::types::Field& Field::children(int index) const {
  // @@protoc_insertion_point(field_get:types.Field.children)
  return _internal_children(index);
}
inline ::types::Field* Field::_internal_add_children() {
  return children_.Add();
}
inline ::types::Field* Field::add_children() {
  // @@protoc_insertion_point(field_add:types.Field.children)
  return _internal_add_children();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Field >&
Field::children() const {
  // @@protoc_insertion_point(field_list:types.Field.children)
  return children_;
}

// -------------------------------------------------------------------

// FieldNode

// optional .types.Field field = 1;
inline bool FieldNode::_internal_has_field() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || field_ != nullptr);
  return value;
}
inline bool FieldNode::has_field() const {
  return _internal_has_field();
}
inline void FieldNode::clear_field() {
  if (field_ != nullptr) field_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::types::Field& FieldNode::_internal_field() const {
  const ::types::Field* p = field_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::Field*>(
      &::types::_Field_default_instance_);
}
inline const ::types::Field& FieldNode::field() const {
  // @@protoc_insertion_point(field_get:types.FieldNode.field)
  return _internal_field();
}
inline ::types::Field* FieldNode::release_field() {
  // @@protoc_insertion_point(field_release:types.FieldNode.field)
  _has_bits_[0] &= ~0x00000001u;
  ::types::Field* temp = field_;
  field_ = nullptr;
  return temp;
}
inline ::types::Field* FieldNode::_internal_mutable_field() {
  _has_bits_[0] |= 0x00000001u;
  if (field_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::Field>(GetArenaNoVirtual());
    field_ = p;
  }
  return field_;
}
inline ::types::Field* FieldNode::mutable_field() {
  // @@protoc_insertion_point(field_mutable:types.FieldNode.field)
  return _internal_mutable_field();
}
inline void FieldNode::set_allocated_field(::types::Field* field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete field_;
  }
  if (field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  field_ = field;
  // @@protoc_insertion_point(field_set_allocated:types.FieldNode.field)
}

// -------------------------------------------------------------------

// FunctionNode

// optional string functionName = 1;
inline bool FunctionNode::_internal_has_functionname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionNode::has_functionname() const {
  return _internal_has_functionname();
}
inline void FunctionNode::clear_functionname() {
  functionname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FunctionNode::functionname() const {
  // @@protoc_insertion_point(field_get:types.FunctionNode.functionName)
  return _internal_functionname();
}
inline void FunctionNode::set_functionname(const std::string& value) {
  _internal_set_functionname(value);
  // @@protoc_insertion_point(field_set:types.FunctionNode.functionName)
}
inline std::string* FunctionNode::mutable_functionname() {
  // @@protoc_insertion_point(field_mutable:types.FunctionNode.functionName)
  return _internal_mutable_functionname();
}
inline const std::string& FunctionNode::_internal_functionname() const {
  return functionname_.GetNoArena();
}
inline void FunctionNode::_internal_set_functionname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  functionname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FunctionNode::set_functionname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  functionname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:types.FunctionNode.functionName)
}
inline void FunctionNode::set_functionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  functionname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:types.FunctionNode.functionName)
}
inline void FunctionNode::set_functionname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  functionname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:types.FunctionNode.functionName)
}
inline std::string* FunctionNode::_internal_mutable_functionname() {
  _has_bits_[0] |= 0x00000001u;
  return functionname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FunctionNode::release_functionname() {
  // @@protoc_insertion_point(field_release:types.FunctionNode.functionName)
  if (!_internal_has_functionname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return functionname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FunctionNode::set_allocated_functionname(std::string* functionname) {
  if (functionname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  functionname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), functionname);
  // @@protoc_insertion_point(field_set_allocated:types.FunctionNode.functionName)
}

// repeated .types.TreeNode inArgs = 2;
inline int FunctionNode::_internal_inargs_size() const {
  return inargs_.size();
}
inline int FunctionNode::inargs_size() const {
  return _internal_inargs_size();
}
inline void FunctionNode::clear_inargs() {
  inargs_.Clear();
}
inline ::types::TreeNode* FunctionNode::mutable_inargs(int index) {
  // @@protoc_insertion_point(field_mutable:types.FunctionNode.inArgs)
  return inargs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::TreeNode >*
FunctionNode::mutable_inargs() {
  // @@protoc_insertion_point(field_mutable_list:types.FunctionNode.inArgs)
  return &inargs_;
}
inline const ::types::TreeNode& FunctionNode::_internal_inargs(int index) const {
  return inargs_.Get(index);
}
inline const ::types::TreeNode& FunctionNode::inargs(int index) const {
  // @@protoc_insertion_point(field_get:types.FunctionNode.inArgs)
  return _internal_inargs(index);
}
inline ::types::TreeNode* FunctionNode::_internal_add_inargs() {
  return inargs_.Add();
}
inline ::types::TreeNode* FunctionNode::add_inargs() {
  // @@protoc_insertion_point(field_add:types.FunctionNode.inArgs)
  return _internal_add_inargs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::TreeNode >&
FunctionNode::inargs() const {
  // @@protoc_insertion_point(field_list:types.FunctionNode.inArgs)
  return inargs_;
}

// optional .types.ExtGandivaType returnType = 3;
inline bool FunctionNode::_internal_has_returntype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || returntype_ != nullptr);
  return value;
}
inline bool FunctionNode::has_returntype() const {
  return _internal_has_returntype();
}
inline void FunctionNode::clear_returntype() {
  if (returntype_ != nullptr) returntype_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::types::ExtGandivaType& FunctionNode::_internal_returntype() const {
  const ::types::ExtGandivaType* p = returntype_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::ExtGandivaType*>(
      &::types::_ExtGandivaType_default_instance_);
}
inline const ::types::ExtGandivaType& FunctionNode::returntype() const {
  // @@protoc_insertion_point(field_get:types.FunctionNode.returnType)
  return _internal_returntype();
}
inline ::types::ExtGandivaType* FunctionNode::release_returntype() {
  // @@protoc_insertion_point(field_release:types.FunctionNode.returnType)
  _has_bits_[0] &= ~0x00000002u;
  ::types::ExtGandivaType* temp = returntype_;
  returntype_ = nullptr;
  return temp;
}
inline ::types::ExtGandivaType* FunctionNode::_internal_mutable_returntype() {
  _has_bits_[0] |= 0x00000002u;
  if (returntype_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::ExtGandivaType>(GetArenaNoVirtual());
    returntype_ = p;
  }
  return returntype_;
}
inline ::types::ExtGandivaType* FunctionNode::mutable_returntype() {
  // @@protoc_insertion_point(field_mutable:types.FunctionNode.returnType)
  return _internal_mutable_returntype();
}
inline void FunctionNode::set_allocated_returntype(::types::ExtGandivaType* returntype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete returntype_;
  }
  if (returntype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      returntype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, returntype, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  returntype_ = returntype;
  // @@protoc_insertion_point(field_set_allocated:types.FunctionNode.returnType)
}

// -------------------------------------------------------------------

// IfNode

// optional .types.TreeNode cond = 1;
inline bool IfNode::_internal_has_cond() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || cond_ != nullptr);
  return value;
}
inline bool IfNode::has_cond() const {
  return _internal_has_cond();
}
inline void IfNode::clear_cond() {
  if (cond_ != nullptr) cond_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::types::TreeNode& IfNode::_internal_cond() const {
  const ::types::TreeNode* p = cond_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::TreeNode*>(
      &::types::_TreeNode_default_instance_);
}
inline const ::types::TreeNode& IfNode::cond() const {
  // @@protoc_insertion_point(field_get:types.IfNode.cond)
  return _internal_cond();
}
inline ::types::TreeNode* IfNode::release_cond() {
  // @@protoc_insertion_point(field_release:types.IfNode.cond)
  _has_bits_[0] &= ~0x00000001u;
  ::types::TreeNode* temp = cond_;
  cond_ = nullptr;
  return temp;
}
inline ::types::TreeNode* IfNode::_internal_mutable_cond() {
  _has_bits_[0] |= 0x00000001u;
  if (cond_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::TreeNode>(GetArenaNoVirtual());
    cond_ = p;
  }
  return cond_;
}
inline ::types::TreeNode* IfNode::mutable_cond() {
  // @@protoc_insertion_point(field_mutable:types.IfNode.cond)
  return _internal_mutable_cond();
}
inline void IfNode::set_allocated_cond(::types::TreeNode* cond) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cond_;
  }
  if (cond) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cond = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cond, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cond_ = cond;
  // @@protoc_insertion_point(field_set_allocated:types.IfNode.cond)
}

// optional .types.TreeNode thenNode = 2;
inline bool IfNode::_internal_has_thennode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || thennode_ != nullptr);
  return value;
}
inline bool IfNode::has_thennode() const {
  return _internal_has_thennode();
}
inline void IfNode::clear_thennode() {
  if (thennode_ != nullptr) thennode_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::types::TreeNode& IfNode::_internal_thennode() const {
  const ::types::TreeNode* p = thennode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::TreeNode*>(
      &::types::_TreeNode_default_instance_);
}
inline const ::types::TreeNode& IfNode::thennode() const {
  // @@protoc_insertion_point(field_get:types.IfNode.thenNode)
  return _internal_thennode();
}
inline ::types::TreeNode* IfNode::release_thennode() {
  // @@protoc_insertion_point(field_release:types.IfNode.thenNode)
  _has_bits_[0] &= ~0x00000002u;
  ::types::TreeNode* temp = thennode_;
  thennode_ = nullptr;
  return temp;
}
inline ::types::TreeNode* IfNode::_internal_mutable_thennode() {
  _has_bits_[0] |= 0x00000002u;
  if (thennode_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::TreeNode>(GetArenaNoVirtual());
    thennode_ = p;
  }
  return thennode_;
}
inline ::types::TreeNode* IfNode::mutable_thennode() {
  // @@protoc_insertion_point(field_mutable:types.IfNode.thenNode)
  return _internal_mutable_thennode();
}
inline void IfNode::set_allocated_thennode(::types::TreeNode* thennode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete thennode_;
  }
  if (thennode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      thennode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thennode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  thennode_ = thennode;
  // @@protoc_insertion_point(field_set_allocated:types.IfNode.thenNode)
}

// optional .types.TreeNode elseNode = 3;
inline bool IfNode::_internal_has_elsenode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || elsenode_ != nullptr);
  return value;
}
inline bool IfNode::has_elsenode() const {
  return _internal_has_elsenode();
}
inline void IfNode::clear_elsenode() {
  if (elsenode_ != nullptr) elsenode_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::types::TreeNode& IfNode::_internal_elsenode() const {
  const ::types::TreeNode* p = elsenode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::TreeNode*>(
      &::types::_TreeNode_default_instance_);
}
inline const ::types::TreeNode& IfNode::elsenode() const {
  // @@protoc_insertion_point(field_get:types.IfNode.elseNode)
  return _internal_elsenode();
}
inline ::types::TreeNode* IfNode::release_elsenode() {
  // @@protoc_insertion_point(field_release:types.IfNode.elseNode)
  _has_bits_[0] &= ~0x00000004u;
  ::types::TreeNode* temp = elsenode_;
  elsenode_ = nullptr;
  return temp;
}
inline ::types::TreeNode* IfNode::_internal_mutable_elsenode() {
  _has_bits_[0] |= 0x00000004u;
  if (elsenode_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::TreeNode>(GetArenaNoVirtual());
    elsenode_ = p;
  }
  return elsenode_;
}
inline ::types::TreeNode* IfNode::mutable_elsenode() {
  // @@protoc_insertion_point(field_mutable:types.IfNode.elseNode)
  return _internal_mutable_elsenode();
}
inline void IfNode::set_allocated_elsenode(::types::TreeNode* elsenode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete elsenode_;
  }
  if (elsenode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      elsenode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elsenode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  elsenode_ = elsenode;
  // @@protoc_insertion_point(field_set_allocated:types.IfNode.elseNode)
}

// optional .types.ExtGandivaType returnType = 4;
inline bool IfNode::_internal_has_returntype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || returntype_ != nullptr);
  return value;
}
inline bool IfNode::has_returntype() const {
  return _internal_has_returntype();
}
inline void IfNode::clear_returntype() {
  if (returntype_ != nullptr) returntype_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::types::ExtGandivaType& IfNode::_internal_returntype() const {
  const ::types::ExtGandivaType* p = returntype_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::ExtGandivaType*>(
      &::types::_ExtGandivaType_default_instance_);
}
inline const ::types::ExtGandivaType& IfNode::returntype() const {
  // @@protoc_insertion_point(field_get:types.IfNode.returnType)
  return _internal_returntype();
}
inline ::types::ExtGandivaType* IfNode::release_returntype() {
  // @@protoc_insertion_point(field_release:types.IfNode.returnType)
  _has_bits_[0] &= ~0x00000008u;
  ::types::ExtGandivaType* temp = returntype_;
  returntype_ = nullptr;
  return temp;
}
inline ::types::ExtGandivaType* IfNode::_internal_mutable_returntype() {
  _has_bits_[0] |= 0x00000008u;
  if (returntype_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::ExtGandivaType>(GetArenaNoVirtual());
    returntype_ = p;
  }
  return returntype_;
}
inline ::types::ExtGandivaType* IfNode::mutable_returntype() {
  // @@protoc_insertion_point(field_mutable:types.IfNode.returnType)
  return _internal_mutable_returntype();
}
inline void IfNode::set_allocated_returntype(::types::ExtGandivaType* returntype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete returntype_;
  }
  if (returntype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      returntype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, returntype, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  returntype_ = returntype;
  // @@protoc_insertion_point(field_set_allocated:types.IfNode.returnType)
}

// -------------------------------------------------------------------

// AndNode

// repeated .types.TreeNode args = 1;
inline int AndNode::_internal_args_size() const {
  return args_.size();
}
inline int AndNode::args_size() const {
  return _internal_args_size();
}
inline void AndNode::clear_args() {
  args_.Clear();
}
inline ::types::TreeNode* AndNode::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:types.AndNode.args)
  return args_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::TreeNode >*
AndNode::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:types.AndNode.args)
  return &args_;
}
inline const ::types::TreeNode& AndNode::_internal_args(int index) const {
  return args_.Get(index);
}
inline const ::types::TreeNode& AndNode::args(int index) const {
  // @@protoc_insertion_point(field_get:types.AndNode.args)
  return _internal_args(index);
}
inline ::types::TreeNode* AndNode::_internal_add_args() {
  return args_.Add();
}
inline ::types::TreeNode* AndNode::add_args() {
  // @@protoc_insertion_point(field_add:types.AndNode.args)
  return _internal_add_args();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::TreeNode >&
AndNode::args() const {
  // @@protoc_insertion_point(field_list:types.AndNode.args)
  return args_;
}

// -------------------------------------------------------------------

// OrNode

// repeated .types.TreeNode args = 1;
inline int OrNode::_internal_args_size() const {
  return args_.size();
}
inline int OrNode::args_size() const {
  return _internal_args_size();
}
inline void OrNode::clear_args() {
  args_.Clear();
}
inline ::types::TreeNode* OrNode::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:types.OrNode.args)
  return args_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::TreeNode >*
OrNode::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:types.OrNode.args)
  return &args_;
}
inline const ::types::TreeNode& OrNode::_internal_args(int index) const {
  return args_.Get(index);
}
inline const ::types::TreeNode& OrNode::args(int index) const {
  // @@protoc_insertion_point(field_get:types.OrNode.args)
  return _internal_args(index);
}
inline ::types::TreeNode* OrNode::_internal_add_args() {
  return args_.Add();
}
inline ::types::TreeNode* OrNode::add_args() {
  // @@protoc_insertion_point(field_add:types.OrNode.args)
  return _internal_add_args();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::TreeNode >&
OrNode::args() const {
  // @@protoc_insertion_point(field_list:types.OrNode.args)
  return args_;
}

// -------------------------------------------------------------------

// NullNode

// optional .types.ExtGandivaType type = 1;
inline bool NullNode::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || type_ != nullptr);
  return value;
}
inline bool NullNode::has_type() const {
  return _internal_has_type();
}
inline void NullNode::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::types::ExtGandivaType& NullNode::_internal_type() const {
  const ::types::ExtGandivaType* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::ExtGandivaType*>(
      &::types::_ExtGandivaType_default_instance_);
}
inline const ::types::ExtGandivaType& NullNode::type() const {
  // @@protoc_insertion_point(field_get:types.NullNode.type)
  return _internal_type();
}
inline ::types::ExtGandivaType* NullNode::release_type() {
  // @@protoc_insertion_point(field_release:types.NullNode.type)
  _has_bits_[0] &= ~0x00000001u;
  ::types::ExtGandivaType* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::types::ExtGandivaType* NullNode::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::ExtGandivaType>(GetArenaNoVirtual());
    type_ = p;
  }
  return type_;
}
inline ::types::ExtGandivaType* NullNode::mutable_type() {
  // @@protoc_insertion_point(field_mutable:types.NullNode.type)
  return _internal_mutable_type();
}
inline void NullNode::set_allocated_type(::types::ExtGandivaType* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:types.NullNode.type)
}

// -------------------------------------------------------------------

// IntNode

// optional int32 value = 1;
inline bool IntNode::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IntNode::has_value() const {
  return _internal_has_value();
}
inline void IntNode::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntNode::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntNode::value() const {
  // @@protoc_insertion_point(field_get:types.IntNode.value)
  return _internal_value();
}
inline void IntNode::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void IntNode::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:types.IntNode.value)
}

// -------------------------------------------------------------------

// FloatNode

// optional float value = 1;
inline bool FloatNode::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FloatNode::has_value() const {
  return _internal_has_value();
}
inline void FloatNode::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float FloatNode::_internal_value() const {
  return value_;
}
inline float FloatNode::value() const {
  // @@protoc_insertion_point(field_get:types.FloatNode.value)
  return _internal_value();
}
inline void FloatNode::_internal_set_value(float value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void FloatNode::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:types.FloatNode.value)
}

// -------------------------------------------------------------------

// DoubleNode

// optional double value = 1;
inline bool DoubleNode::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DoubleNode::has_value() const {
  return _internal_has_value();
}
inline void DoubleNode::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double DoubleNode::_internal_value() const {
  return value_;
}
inline double DoubleNode::value() const {
  // @@protoc_insertion_point(field_get:types.DoubleNode.value)
  return _internal_value();
}
inline void DoubleNode::_internal_set_value(double value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void DoubleNode::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:types.DoubleNode.value)
}

// -------------------------------------------------------------------

// BooleanNode

// optional bool value = 1;
inline bool BooleanNode::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BooleanNode::has_value() const {
  return _internal_has_value();
}
inline void BooleanNode::clear_value() {
  value_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool BooleanNode::_internal_value() const {
  return value_;
}
inline bool BooleanNode::value() const {
  // @@protoc_insertion_point(field_get:types.BooleanNode.value)
  return _internal_value();
}
inline void BooleanNode::_internal_set_value(bool value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void BooleanNode::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:types.BooleanNode.value)
}

// -------------------------------------------------------------------

// LongNode

// optional int64 value = 1;
inline bool LongNode::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LongNode::has_value() const {
  return _internal_has_value();
}
inline void LongNode::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LongNode::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LongNode::value() const {
  // @@protoc_insertion_point(field_get:types.LongNode.value)
  return _internal_value();
}
inline void LongNode::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void LongNode::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:types.LongNode.value)
}

// -------------------------------------------------------------------

// StringNode

// optional bytes value = 1;
inline bool StringNode::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StringNode::has_value() const {
  return _internal_has_value();
}
inline void StringNode::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StringNode::value() const {
  // @@protoc_insertion_point(field_get:types.StringNode.value)
  return _internal_value();
}
inline void StringNode::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:types.StringNode.value)
}
inline std::string* StringNode::mutable_value() {
  // @@protoc_insertion_point(field_mutable:types.StringNode.value)
  return _internal_mutable_value();
}
inline const std::string& StringNode::_internal_value() const {
  return value_.GetNoArena();
}
inline void StringNode::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StringNode::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:types.StringNode.value)
}
inline void StringNode::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:types.StringNode.value)
}
inline void StringNode::set_value(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:types.StringNode.value)
}
inline std::string* StringNode::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StringNode::release_value() {
  // @@protoc_insertion_point(field_release:types.StringNode.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StringNode::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:types.StringNode.value)
}

// -------------------------------------------------------------------

// BinaryNode

// optional bytes value = 1;
inline bool BinaryNode::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BinaryNode::has_value() const {
  return _internal_has_value();
}
inline void BinaryNode::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BinaryNode::value() const {
  // @@protoc_insertion_point(field_get:types.BinaryNode.value)
  return _internal_value();
}
inline void BinaryNode::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:types.BinaryNode.value)
}
inline std::string* BinaryNode::mutable_value() {
  // @@protoc_insertion_point(field_mutable:types.BinaryNode.value)
  return _internal_mutable_value();
}
inline const std::string& BinaryNode::_internal_value() const {
  return value_.GetNoArena();
}
inline void BinaryNode::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BinaryNode::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:types.BinaryNode.value)
}
inline void BinaryNode::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:types.BinaryNode.value)
}
inline void BinaryNode::set_value(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:types.BinaryNode.value)
}
inline std::string* BinaryNode::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BinaryNode::release_value() {
  // @@protoc_insertion_point(field_release:types.BinaryNode.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BinaryNode::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:types.BinaryNode.value)
}

// -------------------------------------------------------------------

// DecimalNode

// optional string value = 1;
inline bool DecimalNode::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DecimalNode::has_value() const {
  return _internal_has_value();
}
inline void DecimalNode::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DecimalNode::value() const {
  // @@protoc_insertion_point(field_get:types.DecimalNode.value)
  return _internal_value();
}
inline void DecimalNode::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:types.DecimalNode.value)
}
inline std::string* DecimalNode::mutable_value() {
  // @@protoc_insertion_point(field_mutable:types.DecimalNode.value)
  return _internal_mutable_value();
}
inline const std::string& DecimalNode::_internal_value() const {
  return value_.GetNoArena();
}
inline void DecimalNode::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DecimalNode::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:types.DecimalNode.value)
}
inline void DecimalNode::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:types.DecimalNode.value)
}
inline void DecimalNode::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:types.DecimalNode.value)
}
inline std::string* DecimalNode::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DecimalNode::release_value() {
  // @@protoc_insertion_point(field_release:types.DecimalNode.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DecimalNode::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:types.DecimalNode.value)
}

// optional int32 precision = 2;
inline bool DecimalNode::_internal_has_precision() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DecimalNode::has_precision() const {
  return _internal_has_precision();
}
inline void DecimalNode::clear_precision() {
  precision_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecimalNode::_internal_precision() const {
  return precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecimalNode::precision() const {
  // @@protoc_insertion_point(field_get:types.DecimalNode.precision)
  return _internal_precision();
}
inline void DecimalNode::_internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  precision_ = value;
}
inline void DecimalNode::set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:types.DecimalNode.precision)
}

// optional int32 scale = 3;
inline bool DecimalNode::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DecimalNode::has_scale() const {
  return _internal_has_scale();
}
inline void DecimalNode::clear_scale() {
  scale_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecimalNode::_internal_scale() const {
  return scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecimalNode::scale() const {
  // @@protoc_insertion_point(field_get:types.DecimalNode.scale)
  return _internal_scale();
}
inline void DecimalNode::_internal_set_scale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  scale_ = value;
}
inline void DecimalNode::set_scale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:types.DecimalNode.scale)
}

// -------------------------------------------------------------------

// TreeNode

// optional .types.FieldNode fieldNode = 1;
inline bool TreeNode::_internal_has_fieldnode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || fieldnode_ != nullptr);
  return value;
}
inline bool TreeNode::has_fieldnode() const {
  return _internal_has_fieldnode();
}
inline void TreeNode::clear_fieldnode() {
  if (fieldnode_ != nullptr) fieldnode_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::types::FieldNode& TreeNode::_internal_fieldnode() const {
  const ::types::FieldNode* p = fieldnode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::FieldNode*>(
      &::types::_FieldNode_default_instance_);
}
inline const ::types::FieldNode& TreeNode::fieldnode() const {
  // @@protoc_insertion_point(field_get:types.TreeNode.fieldNode)
  return _internal_fieldnode();
}
inline ::types::FieldNode* TreeNode::release_fieldnode() {
  // @@protoc_insertion_point(field_release:types.TreeNode.fieldNode)
  _has_bits_[0] &= ~0x00000001u;
  ::types::FieldNode* temp = fieldnode_;
  fieldnode_ = nullptr;
  return temp;
}
inline ::types::FieldNode* TreeNode::_internal_mutable_fieldnode() {
  _has_bits_[0] |= 0x00000001u;
  if (fieldnode_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::FieldNode>(GetArenaNoVirtual());
    fieldnode_ = p;
  }
  return fieldnode_;
}
inline ::types::FieldNode* TreeNode::mutable_fieldnode() {
  // @@protoc_insertion_point(field_mutable:types.TreeNode.fieldNode)
  return _internal_mutable_fieldnode();
}
inline void TreeNode::set_allocated_fieldnode(::types::FieldNode* fieldnode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fieldnode_;
  }
  if (fieldnode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fieldnode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fieldnode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fieldnode_ = fieldnode;
  // @@protoc_insertion_point(field_set_allocated:types.TreeNode.fieldNode)
}

// optional .types.FunctionNode fnNode = 2;
inline bool TreeNode::_internal_has_fnnode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || fnnode_ != nullptr);
  return value;
}
inline bool TreeNode::has_fnnode() const {
  return _internal_has_fnnode();
}
inline void TreeNode::clear_fnnode() {
  if (fnnode_ != nullptr) fnnode_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::types::FunctionNode& TreeNode::_internal_fnnode() const {
  const ::types::FunctionNode* p = fnnode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::FunctionNode*>(
      &::types::_FunctionNode_default_instance_);
}
inline const ::types::FunctionNode& TreeNode::fnnode() const {
  // @@protoc_insertion_point(field_get:types.TreeNode.fnNode)
  return _internal_fnnode();
}
inline ::types::FunctionNode* TreeNode::release_fnnode() {
  // @@protoc_insertion_point(field_release:types.TreeNode.fnNode)
  _has_bits_[0] &= ~0x00000002u;
  ::types::FunctionNode* temp = fnnode_;
  fnnode_ = nullptr;
  return temp;
}
inline ::types::FunctionNode* TreeNode::_internal_mutable_fnnode() {
  _has_bits_[0] |= 0x00000002u;
  if (fnnode_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::FunctionNode>(GetArenaNoVirtual());
    fnnode_ = p;
  }
  return fnnode_;
}
inline ::types::FunctionNode* TreeNode::mutable_fnnode() {
  // @@protoc_insertion_point(field_mutable:types.TreeNode.fnNode)
  return _internal_mutable_fnnode();
}
inline void TreeNode::set_allocated_fnnode(::types::FunctionNode* fnnode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fnnode_;
  }
  if (fnnode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fnnode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fnnode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  fnnode_ = fnnode;
  // @@protoc_insertion_point(field_set_allocated:types.TreeNode.fnNode)
}

// optional .types.IfNode ifNode = 6;
inline bool TreeNode::_internal_has_ifnode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ifnode_ != nullptr);
  return value;
}
inline bool TreeNode::has_ifnode() const {
  return _internal_has_ifnode();
}
inline void TreeNode::clear_ifnode() {
  if (ifnode_ != nullptr) ifnode_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::types::IfNode& TreeNode::_internal_ifnode() const {
  const ::types::IfNode* p = ifnode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::IfNode*>(
      &::types::_IfNode_default_instance_);
}
inline const ::types::IfNode& TreeNode::ifnode() const {
  // @@protoc_insertion_point(field_get:types.TreeNode.ifNode)
  return _internal_ifnode();
}
inline ::types::IfNode* TreeNode::release_ifnode() {
  // @@protoc_insertion_point(field_release:types.TreeNode.ifNode)
  _has_bits_[0] &= ~0x00000004u;
  ::types::IfNode* temp = ifnode_;
  ifnode_ = nullptr;
  return temp;
}
inline ::types::IfNode* TreeNode::_internal_mutable_ifnode() {
  _has_bits_[0] |= 0x00000004u;
  if (ifnode_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::IfNode>(GetArenaNoVirtual());
    ifnode_ = p;
  }
  return ifnode_;
}
inline ::types::IfNode* TreeNode::mutable_ifnode() {
  // @@protoc_insertion_point(field_mutable:types.TreeNode.ifNode)
  return _internal_mutable_ifnode();
}
inline void TreeNode::set_allocated_ifnode(::types::IfNode* ifnode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ifnode_;
  }
  if (ifnode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ifnode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ifnode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ifnode_ = ifnode;
  // @@protoc_insertion_point(field_set_allocated:types.TreeNode.ifNode)
}

// optional .types.AndNode andNode = 7;
inline bool TreeNode::_internal_has_andnode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || andnode_ != nullptr);
  return value;
}
inline bool TreeNode::has_andnode() const {
  return _internal_has_andnode();
}
inline void TreeNode::clear_andnode() {
  if (andnode_ != nullptr) andnode_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::types::AndNode& TreeNode::_internal_andnode() const {
  const ::types::AndNode* p = andnode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::AndNode*>(
      &::types::_AndNode_default_instance_);
}
inline const ::types::AndNode& TreeNode::andnode() const {
  // @@protoc_insertion_point(field_get:types.TreeNode.andNode)
  return _internal_andnode();
}
inline ::types::AndNode* TreeNode::release_andnode() {
  // @@protoc_insertion_point(field_release:types.TreeNode.andNode)
  _has_bits_[0] &= ~0x00000008u;
  ::types::AndNode* temp = andnode_;
  andnode_ = nullptr;
  return temp;
}
inline ::types::AndNode* TreeNode::_internal_mutable_andnode() {
  _has_bits_[0] |= 0x00000008u;
  if (andnode_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::AndNode>(GetArenaNoVirtual());
    andnode_ = p;
  }
  return andnode_;
}
inline ::types::AndNode* TreeNode::mutable_andnode() {
  // @@protoc_insertion_point(field_mutable:types.TreeNode.andNode)
  return _internal_mutable_andnode();
}
inline void TreeNode::set_allocated_andnode(::types::AndNode* andnode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete andnode_;
  }
  if (andnode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      andnode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, andnode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  andnode_ = andnode;
  // @@protoc_insertion_point(field_set_allocated:types.TreeNode.andNode)
}

// optional .types.OrNode orNode = 8;
inline bool TreeNode::_internal_has_ornode() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || ornode_ != nullptr);
  return value;
}
inline bool TreeNode::has_ornode() const {
  return _internal_has_ornode();
}
inline void TreeNode::clear_ornode() {
  if (ornode_ != nullptr) ornode_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::types::OrNode& TreeNode::_internal_ornode() const {
  const ::types::OrNode* p = ornode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::OrNode*>(
      &::types::_OrNode_default_instance_);
}
inline const ::types::OrNode& TreeNode::ornode() const {
  // @@protoc_insertion_point(field_get:types.TreeNode.orNode)
  return _internal_ornode();
}
inline ::types::OrNode* TreeNode::release_ornode() {
  // @@protoc_insertion_point(field_release:types.TreeNode.orNode)
  _has_bits_[0] &= ~0x00000010u;
  ::types::OrNode* temp = ornode_;
  ornode_ = nullptr;
  return temp;
}
inline ::types::OrNode* TreeNode::_internal_mutable_ornode() {
  _has_bits_[0] |= 0x00000010u;
  if (ornode_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::OrNode>(GetArenaNoVirtual());
    ornode_ = p;
  }
  return ornode_;
}
inline ::types::OrNode* TreeNode::mutable_ornode() {
  // @@protoc_insertion_point(field_mutable:types.TreeNode.orNode)
  return _internal_mutable_ornode();
}
inline void TreeNode::set_allocated_ornode(::types::OrNode* ornode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ornode_;
  }
  if (ornode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ornode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ornode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  ornode_ = ornode;
  // @@protoc_insertion_point(field_set_allocated:types.TreeNode.orNode)
}

// optional .types.NullNode nullNode = 11;
inline bool TreeNode::_internal_has_nullnode() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || nullnode_ != nullptr);
  return value;
}
inline bool TreeNode::has_nullnode() const {
  return _internal_has_nullnode();
}
inline void TreeNode::clear_nullnode() {
  if (nullnode_ != nullptr) nullnode_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::types::NullNode& TreeNode::_internal_nullnode() const {
  const ::types::NullNode* p = nullnode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::NullNode*>(
      &::types::_NullNode_default_instance_);
}
inline const ::types::NullNode& TreeNode::nullnode() const {
  // @@protoc_insertion_point(field_get:types.TreeNode.nullNode)
  return _internal_nullnode();
}
inline ::types::NullNode* TreeNode::release_nullnode() {
  // @@protoc_insertion_point(field_release:types.TreeNode.nullNode)
  _has_bits_[0] &= ~0x00000020u;
  ::types::NullNode* temp = nullnode_;
  nullnode_ = nullptr;
  return temp;
}
inline ::types::NullNode* TreeNode::_internal_mutable_nullnode() {
  _has_bits_[0] |= 0x00000020u;
  if (nullnode_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::NullNode>(GetArenaNoVirtual());
    nullnode_ = p;
  }
  return nullnode_;
}
inline ::types::NullNode* TreeNode::mutable_nullnode() {
  // @@protoc_insertion_point(field_mutable:types.TreeNode.nullNode)
  return _internal_mutable_nullnode();
}
inline void TreeNode::set_allocated_nullnode(::types::NullNode* nullnode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete nullnode_;
  }
  if (nullnode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      nullnode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nullnode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  nullnode_ = nullnode;
  // @@protoc_insertion_point(field_set_allocated:types.TreeNode.nullNode)
}

// optional .types.IntNode intNode = 12;
inline bool TreeNode::_internal_has_intnode() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || intnode_ != nullptr);
  return value;
}
inline bool TreeNode::has_intnode() const {
  return _internal_has_intnode();
}
inline void TreeNode::clear_intnode() {
  if (intnode_ != nullptr) intnode_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::types::IntNode& TreeNode::_internal_intnode() const {
  const ::types::IntNode* p = intnode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::IntNode*>(
      &::types::_IntNode_default_instance_);
}
inline const ::types::IntNode& TreeNode::intnode() const {
  // @@protoc_insertion_point(field_get:types.TreeNode.intNode)
  return _internal_intnode();
}
inline ::types::IntNode* TreeNode::release_intnode() {
  // @@protoc_insertion_point(field_release:types.TreeNode.intNode)
  _has_bits_[0] &= ~0x00000040u;
  ::types::IntNode* temp = intnode_;
  intnode_ = nullptr;
  return temp;
}
inline ::types::IntNode* TreeNode::_internal_mutable_intnode() {
  _has_bits_[0] |= 0x00000040u;
  if (intnode_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::IntNode>(GetArenaNoVirtual());
    intnode_ = p;
  }
  return intnode_;
}
inline ::types::IntNode* TreeNode::mutable_intnode() {
  // @@protoc_insertion_point(field_mutable:types.TreeNode.intNode)
  return _internal_mutable_intnode();
}
inline void TreeNode::set_allocated_intnode(::types::IntNode* intnode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete intnode_;
  }
  if (intnode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      intnode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intnode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  intnode_ = intnode;
  // @@protoc_insertion_point(field_set_allocated:types.TreeNode.intNode)
}

// optional .types.FloatNode floatNode = 13;
inline bool TreeNode::_internal_has_floatnode() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || floatnode_ != nullptr);
  return value;
}
inline bool TreeNode::has_floatnode() const {
  return _internal_has_floatnode();
}
inline void TreeNode::clear_floatnode() {
  if (floatnode_ != nullptr) floatnode_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::types::FloatNode& TreeNode::_internal_floatnode() const {
  const ::types::FloatNode* p = floatnode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::FloatNode*>(
      &::types::_FloatNode_default_instance_);
}
inline const ::types::FloatNode& TreeNode::floatnode() const {
  // @@protoc_insertion_point(field_get:types.TreeNode.floatNode)
  return _internal_floatnode();
}
inline ::types::FloatNode* TreeNode::release_floatnode() {
  // @@protoc_insertion_point(field_release:types.TreeNode.floatNode)
  _has_bits_[0] &= ~0x00000080u;
  ::types::FloatNode* temp = floatnode_;
  floatnode_ = nullptr;
  return temp;
}
inline ::types::FloatNode* TreeNode::_internal_mutable_floatnode() {
  _has_bits_[0] |= 0x00000080u;
  if (floatnode_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::FloatNode>(GetArenaNoVirtual());
    floatnode_ = p;
  }
  return floatnode_;
}
inline ::types::FloatNode* TreeNode::mutable_floatnode() {
  // @@protoc_insertion_point(field_mutable:types.TreeNode.floatNode)
  return _internal_mutable_floatnode();
}
inline void TreeNode::set_allocated_floatnode(::types::FloatNode* floatnode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete floatnode_;
  }
  if (floatnode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      floatnode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, floatnode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  floatnode_ = floatnode;
  // @@protoc_insertion_point(field_set_allocated:types.TreeNode.floatNode)
}

// optional .types.LongNode longNode = 14;
inline bool TreeNode::_internal_has_longnode() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || longnode_ != nullptr);
  return value;
}
inline bool TreeNode::has_longnode() const {
  return _internal_has_longnode();
}
inline void TreeNode::clear_longnode() {
  if (longnode_ != nullptr) longnode_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::types::LongNode& TreeNode::_internal_longnode() const {
  const ::types::LongNode* p = longnode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::LongNode*>(
      &::types::_LongNode_default_instance_);
}
inline const ::types::LongNode& TreeNode::longnode() const {
  // @@protoc_insertion_point(field_get:types.TreeNode.longNode)
  return _internal_longnode();
}
inline ::types::LongNode* TreeNode::release_longnode() {
  // @@protoc_insertion_point(field_release:types.TreeNode.longNode)
  _has_bits_[0] &= ~0x00000100u;
  ::types::LongNode* temp = longnode_;
  longnode_ = nullptr;
  return temp;
}
inline ::types::LongNode* TreeNode::_internal_mutable_longnode() {
  _has_bits_[0] |= 0x00000100u;
  if (longnode_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::LongNode>(GetArenaNoVirtual());
    longnode_ = p;
  }
  return longnode_;
}
inline ::types::LongNode* TreeNode::mutable_longnode() {
  // @@protoc_insertion_point(field_mutable:types.TreeNode.longNode)
  return _internal_mutable_longnode();
}
inline void TreeNode::set_allocated_longnode(::types::LongNode* longnode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete longnode_;
  }
  if (longnode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      longnode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, longnode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  longnode_ = longnode;
  // @@protoc_insertion_point(field_set_allocated:types.TreeNode.longNode)
}

// optional .types.BooleanNode booleanNode = 15;
inline bool TreeNode::_internal_has_booleannode() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || booleannode_ != nullptr);
  return value;
}
inline bool TreeNode::has_booleannode() const {
  return _internal_has_booleannode();
}
inline void TreeNode::clear_booleannode() {
  if (booleannode_ != nullptr) booleannode_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::types::BooleanNode& TreeNode::_internal_booleannode() const {
  const ::types::BooleanNode* p = booleannode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::BooleanNode*>(
      &::types::_BooleanNode_default_instance_);
}
inline const ::types::BooleanNode& TreeNode::booleannode() const {
  // @@protoc_insertion_point(field_get:types.TreeNode.booleanNode)
  return _internal_booleannode();
}
inline ::types::BooleanNode* TreeNode::release_booleannode() {
  // @@protoc_insertion_point(field_release:types.TreeNode.booleanNode)
  _has_bits_[0] &= ~0x00000200u;
  ::types::BooleanNode* temp = booleannode_;
  booleannode_ = nullptr;
  return temp;
}
inline ::types::BooleanNode* TreeNode::_internal_mutable_booleannode() {
  _has_bits_[0] |= 0x00000200u;
  if (booleannode_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::BooleanNode>(GetArenaNoVirtual());
    booleannode_ = p;
  }
  return booleannode_;
}
inline ::types::BooleanNode* TreeNode::mutable_booleannode() {
  // @@protoc_insertion_point(field_mutable:types.TreeNode.booleanNode)
  return _internal_mutable_booleannode();
}
inline void TreeNode::set_allocated_booleannode(::types::BooleanNode* booleannode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete booleannode_;
  }
  if (booleannode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      booleannode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, booleannode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  booleannode_ = booleannode;
  // @@protoc_insertion_point(field_set_allocated:types.TreeNode.booleanNode)
}

// optional .types.DoubleNode doubleNode = 16;
inline bool TreeNode::_internal_has_doublenode() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || doublenode_ != nullptr);
  return value;
}
inline bool TreeNode::has_doublenode() const {
  return _internal_has_doublenode();
}
inline void TreeNode::clear_doublenode() {
  if (doublenode_ != nullptr) doublenode_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::types::DoubleNode& TreeNode::_internal_doublenode() const {
  const ::types::DoubleNode* p = doublenode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::DoubleNode*>(
      &::types::_DoubleNode_default_instance_);
}
inline const ::types::DoubleNode& TreeNode::doublenode() const {
  // @@protoc_insertion_point(field_get:types.TreeNode.doubleNode)
  return _internal_doublenode();
}
inline ::types::DoubleNode* TreeNode::release_doublenode() {
  // @@protoc_insertion_point(field_release:types.TreeNode.doubleNode)
  _has_bits_[0] &= ~0x00000400u;
  ::types::DoubleNode* temp = doublenode_;
  doublenode_ = nullptr;
  return temp;
}
inline ::types::DoubleNode* TreeNode::_internal_mutable_doublenode() {
  _has_bits_[0] |= 0x00000400u;
  if (doublenode_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::DoubleNode>(GetArenaNoVirtual());
    doublenode_ = p;
  }
  return doublenode_;
}
inline ::types::DoubleNode* TreeNode::mutable_doublenode() {
  // @@protoc_insertion_point(field_mutable:types.TreeNode.doubleNode)
  return _internal_mutable_doublenode();
}
inline void TreeNode::set_allocated_doublenode(::types::DoubleNode* doublenode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete doublenode_;
  }
  if (doublenode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      doublenode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, doublenode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  doublenode_ = doublenode;
  // @@protoc_insertion_point(field_set_allocated:types.TreeNode.doubleNode)
}

// optional .types.StringNode stringNode = 17;
inline bool TreeNode::_internal_has_stringnode() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || stringnode_ != nullptr);
  return value;
}
inline bool TreeNode::has_stringnode() const {
  return _internal_has_stringnode();
}
inline void TreeNode::clear_stringnode() {
  if (stringnode_ != nullptr) stringnode_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::types::StringNode& TreeNode::_internal_stringnode() const {
  const ::types::StringNode* p = stringnode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::StringNode*>(
      &::types::_StringNode_default_instance_);
}
inline const ::types::StringNode& TreeNode::stringnode() const {
  // @@protoc_insertion_point(field_get:types.TreeNode.stringNode)
  return _internal_stringnode();
}
inline ::types::StringNode* TreeNode::release_stringnode() {
  // @@protoc_insertion_point(field_release:types.TreeNode.stringNode)
  _has_bits_[0] &= ~0x00000800u;
  ::types::StringNode* temp = stringnode_;
  stringnode_ = nullptr;
  return temp;
}
inline ::types::StringNode* TreeNode::_internal_mutable_stringnode() {
  _has_bits_[0] |= 0x00000800u;
  if (stringnode_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::StringNode>(GetArenaNoVirtual());
    stringnode_ = p;
  }
  return stringnode_;
}
inline ::types::StringNode* TreeNode::mutable_stringnode() {
  // @@protoc_insertion_point(field_mutable:types.TreeNode.stringNode)
  return _internal_mutable_stringnode();
}
inline void TreeNode::set_allocated_stringnode(::types::StringNode* stringnode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stringnode_;
  }
  if (stringnode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stringnode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stringnode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  stringnode_ = stringnode;
  // @@protoc_insertion_point(field_set_allocated:types.TreeNode.stringNode)
}

// optional .types.BinaryNode binaryNode = 18;
inline bool TreeNode::_internal_has_binarynode() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || binarynode_ != nullptr);
  return value;
}
inline bool TreeNode::has_binarynode() const {
  return _internal_has_binarynode();
}
inline void TreeNode::clear_binarynode() {
  if (binarynode_ != nullptr) binarynode_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::types::BinaryNode& TreeNode::_internal_binarynode() const {
  const ::types::BinaryNode* p = binarynode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::BinaryNode*>(
      &::types::_BinaryNode_default_instance_);
}
inline const ::types::BinaryNode& TreeNode::binarynode() const {
  // @@protoc_insertion_point(field_get:types.TreeNode.binaryNode)
  return _internal_binarynode();
}
inline ::types::BinaryNode* TreeNode::release_binarynode() {
  // @@protoc_insertion_point(field_release:types.TreeNode.binaryNode)
  _has_bits_[0] &= ~0x00001000u;
  ::types::BinaryNode* temp = binarynode_;
  binarynode_ = nullptr;
  return temp;
}
inline ::types::BinaryNode* TreeNode::_internal_mutable_binarynode() {
  _has_bits_[0] |= 0x00001000u;
  if (binarynode_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::BinaryNode>(GetArenaNoVirtual());
    binarynode_ = p;
  }
  return binarynode_;
}
inline ::types::BinaryNode* TreeNode::mutable_binarynode() {
  // @@protoc_insertion_point(field_mutable:types.TreeNode.binaryNode)
  return _internal_mutable_binarynode();
}
inline void TreeNode::set_allocated_binarynode(::types::BinaryNode* binarynode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete binarynode_;
  }
  if (binarynode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      binarynode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binarynode, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  binarynode_ = binarynode;
  // @@protoc_insertion_point(field_set_allocated:types.TreeNode.binaryNode)
}

// optional .types.DecimalNode decimalNode = 19;
inline bool TreeNode::_internal_has_decimalnode() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || decimalnode_ != nullptr);
  return value;
}
inline bool TreeNode::has_decimalnode() const {
  return _internal_has_decimalnode();
}
inline void TreeNode::clear_decimalnode() {
  if (decimalnode_ != nullptr) decimalnode_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::types::DecimalNode& TreeNode::_internal_decimalnode() const {
  const ::types::DecimalNode* p = decimalnode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::DecimalNode*>(
      &::types::_DecimalNode_default_instance_);
}
inline const ::types::DecimalNode& TreeNode::decimalnode() const {
  // @@protoc_insertion_point(field_get:types.TreeNode.decimalNode)
  return _internal_decimalnode();
}
inline ::types::DecimalNode* TreeNode::release_decimalnode() {
  // @@protoc_insertion_point(field_release:types.TreeNode.decimalNode)
  _has_bits_[0] &= ~0x00002000u;
  ::types::DecimalNode* temp = decimalnode_;
  decimalnode_ = nullptr;
  return temp;
}
inline ::types::DecimalNode* TreeNode::_internal_mutable_decimalnode() {
  _has_bits_[0] |= 0x00002000u;
  if (decimalnode_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::DecimalNode>(GetArenaNoVirtual());
    decimalnode_ = p;
  }
  return decimalnode_;
}
inline ::types::DecimalNode* TreeNode::mutable_decimalnode() {
  // @@protoc_insertion_point(field_mutable:types.TreeNode.decimalNode)
  return _internal_mutable_decimalnode();
}
inline void TreeNode::set_allocated_decimalnode(::types::DecimalNode* decimalnode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete decimalnode_;
  }
  if (decimalnode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      decimalnode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decimalnode, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  decimalnode_ = decimalnode;
  // @@protoc_insertion_point(field_set_allocated:types.TreeNode.decimalNode)
}

// optional .types.InNode inNode = 21;
inline bool TreeNode::_internal_has_innode() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || innode_ != nullptr);
  return value;
}
inline bool TreeNode::has_innode() const {
  return _internal_has_innode();
}
inline void TreeNode::clear_innode() {
  if (innode_ != nullptr) innode_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::types::InNode& TreeNode::_internal_innode() const {
  const ::types::InNode* p = innode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::InNode*>(
      &::types::_InNode_default_instance_);
}
inline const ::types::InNode& TreeNode::innode() const {
  // @@protoc_insertion_point(field_get:types.TreeNode.inNode)
  return _internal_innode();
}
inline ::types::InNode* TreeNode::release_innode() {
  // @@protoc_insertion_point(field_release:types.TreeNode.inNode)
  _has_bits_[0] &= ~0x00004000u;
  ::types::InNode* temp = innode_;
  innode_ = nullptr;
  return temp;
}
inline ::types::InNode* TreeNode::_internal_mutable_innode() {
  _has_bits_[0] |= 0x00004000u;
  if (innode_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::InNode>(GetArenaNoVirtual());
    innode_ = p;
  }
  return innode_;
}
inline ::types::InNode* TreeNode::mutable_innode() {
  // @@protoc_insertion_point(field_mutable:types.TreeNode.inNode)
  return _internal_mutable_innode();
}
inline void TreeNode::set_allocated_innode(::types::InNode* innode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete innode_;
  }
  if (innode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      innode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, innode, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  innode_ = innode;
  // @@protoc_insertion_point(field_set_allocated:types.TreeNode.inNode)
}

// -------------------------------------------------------------------

// ExpressionRoot

// optional .types.TreeNode root = 1;
inline bool ExpressionRoot::_internal_has_root() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || root_ != nullptr);
  return value;
}
inline bool ExpressionRoot::has_root() const {
  return _internal_has_root();
}
inline void ExpressionRoot::clear_root() {
  if (root_ != nullptr) root_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::types::TreeNode& ExpressionRoot::_internal_root() const {
  const ::types::TreeNode* p = root_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::TreeNode*>(
      &::types::_TreeNode_default_instance_);
}
inline const ::types::TreeNode& ExpressionRoot::root() const {
  // @@protoc_insertion_point(field_get:types.ExpressionRoot.root)
  return _internal_root();
}
inline ::types::TreeNode* ExpressionRoot::release_root() {
  // @@protoc_insertion_point(field_release:types.ExpressionRoot.root)
  _has_bits_[0] &= ~0x00000001u;
  ::types::TreeNode* temp = root_;
  root_ = nullptr;
  return temp;
}
inline ::types::TreeNode* ExpressionRoot::_internal_mutable_root() {
  _has_bits_[0] |= 0x00000001u;
  if (root_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::TreeNode>(GetArenaNoVirtual());
    root_ = p;
  }
  return root_;
}
inline ::types::TreeNode* ExpressionRoot::mutable_root() {
  // @@protoc_insertion_point(field_mutable:types.ExpressionRoot.root)
  return _internal_mutable_root();
}
inline void ExpressionRoot::set_allocated_root(::types::TreeNode* root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete root_;
  }
  if (root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  root_ = root;
  // @@protoc_insertion_point(field_set_allocated:types.ExpressionRoot.root)
}

// optional .types.Field resultType = 2;
inline bool ExpressionRoot::_internal_has_resulttype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || resulttype_ != nullptr);
  return value;
}
inline bool ExpressionRoot::has_resulttype() const {
  return _internal_has_resulttype();
}
inline void ExpressionRoot::clear_resulttype() {
  if (resulttype_ != nullptr) resulttype_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::types::Field& ExpressionRoot::_internal_resulttype() const {
  const ::types::Field* p = resulttype_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::Field*>(
      &::types::_Field_default_instance_);
}
inline const ::types::Field& ExpressionRoot::resulttype() const {
  // @@protoc_insertion_point(field_get:types.ExpressionRoot.resultType)
  return _internal_resulttype();
}
inline ::types::Field* ExpressionRoot::release_resulttype() {
  // @@protoc_insertion_point(field_release:types.ExpressionRoot.resultType)
  _has_bits_[0] &= ~0x00000002u;
  ::types::Field* temp = resulttype_;
  resulttype_ = nullptr;
  return temp;
}
inline ::types::Field* ExpressionRoot::_internal_mutable_resulttype() {
  _has_bits_[0] |= 0x00000002u;
  if (resulttype_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::Field>(GetArenaNoVirtual());
    resulttype_ = p;
  }
  return resulttype_;
}
inline ::types::Field* ExpressionRoot::mutable_resulttype() {
  // @@protoc_insertion_point(field_mutable:types.ExpressionRoot.resultType)
  return _internal_mutable_resulttype();
}
inline void ExpressionRoot::set_allocated_resulttype(::types::Field* resulttype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete resulttype_;
  }
  if (resulttype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resulttype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resulttype, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  resulttype_ = resulttype;
  // @@protoc_insertion_point(field_set_allocated:types.ExpressionRoot.resultType)
}

// -------------------------------------------------------------------

// ExpressionList

// repeated .types.ExpressionRoot exprs = 2;
inline int ExpressionList::_internal_exprs_size() const {
  return exprs_.size();
}
inline int ExpressionList::exprs_size() const {
  return _internal_exprs_size();
}
inline void ExpressionList::clear_exprs() {
  exprs_.Clear();
}
inline ::types::ExpressionRoot* ExpressionList::mutable_exprs(int index) {
  // @@protoc_insertion_point(field_mutable:types.ExpressionList.exprs)
  return exprs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::ExpressionRoot >*
ExpressionList::mutable_exprs() {
  // @@protoc_insertion_point(field_mutable_list:types.ExpressionList.exprs)
  return &exprs_;
}
inline const ::types::ExpressionRoot& ExpressionList::_internal_exprs(int index) const {
  return exprs_.Get(index);
}
inline const ::types::ExpressionRoot& ExpressionList::exprs(int index) const {
  // @@protoc_insertion_point(field_get:types.ExpressionList.exprs)
  return _internal_exprs(index);
}
inline ::types::ExpressionRoot* ExpressionList::_internal_add_exprs() {
  return exprs_.Add();
}
inline ::types::ExpressionRoot* ExpressionList::add_exprs() {
  // @@protoc_insertion_point(field_add:types.ExpressionList.exprs)
  return _internal_add_exprs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::ExpressionRoot >&
ExpressionList::exprs() const {
  // @@protoc_insertion_point(field_list:types.ExpressionList.exprs)
  return exprs_;
}

// -------------------------------------------------------------------

// Condition

// optional .types.TreeNode root = 1;
inline bool Condition::_internal_has_root() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || root_ != nullptr);
  return value;
}
inline bool Condition::has_root() const {
  return _internal_has_root();
}
inline void Condition::clear_root() {
  if (root_ != nullptr) root_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::types::TreeNode& Condition::_internal_root() const {
  const ::types::TreeNode* p = root_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::TreeNode*>(
      &::types::_TreeNode_default_instance_);
}
inline const ::types::TreeNode& Condition::root() const {
  // @@protoc_insertion_point(field_get:types.Condition.root)
  return _internal_root();
}
inline ::types::TreeNode* Condition::release_root() {
  // @@protoc_insertion_point(field_release:types.Condition.root)
  _has_bits_[0] &= ~0x00000001u;
  ::types::TreeNode* temp = root_;
  root_ = nullptr;
  return temp;
}
inline ::types::TreeNode* Condition::_internal_mutable_root() {
  _has_bits_[0] |= 0x00000001u;
  if (root_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::TreeNode>(GetArenaNoVirtual());
    root_ = p;
  }
  return root_;
}
inline ::types::TreeNode* Condition::mutable_root() {
  // @@protoc_insertion_point(field_mutable:types.Condition.root)
  return _internal_mutable_root();
}
inline void Condition::set_allocated_root(::types::TreeNode* root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete root_;
  }
  if (root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  root_ = root;
  // @@protoc_insertion_point(field_set_allocated:types.Condition.root)
}

// -------------------------------------------------------------------

// Schema

// repeated .types.Field columns = 1;
inline int Schema::_internal_columns_size() const {
  return columns_.size();
}
inline int Schema::columns_size() const {
  return _internal_columns_size();
}
inline void Schema::clear_columns() {
  columns_.Clear();
}
inline ::types::Field* Schema::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:types.Schema.columns)
  return columns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Field >*
Schema::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:types.Schema.columns)
  return &columns_;
}
inline const ::types::Field& Schema::_internal_columns(int index) const {
  return columns_.Get(index);
}
inline const ::types::Field& Schema::columns(int index) const {
  // @@protoc_insertion_point(field_get:types.Schema.columns)
  return _internal_columns(index);
}
inline ::types::Field* Schema::_internal_add_columns() {
  return columns_.Add();
}
inline ::types::Field* Schema::add_columns() {
  // @@protoc_insertion_point(field_add:types.Schema.columns)
  return _internal_add_columns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Field >&
Schema::columns() const {
  // @@protoc_insertion_point(field_list:types.Schema.columns)
  return columns_;
}

// -------------------------------------------------------------------

// GandivaDataTypes

// repeated .types.ExtGandivaType dataType = 1;
inline int GandivaDataTypes::_internal_datatype_size() const {
  return datatype_.size();
}
inline int GandivaDataTypes::datatype_size() const {
  return _internal_datatype_size();
}
inline void GandivaDataTypes::clear_datatype() {
  datatype_.Clear();
}
inline ::types::ExtGandivaType* GandivaDataTypes::mutable_datatype(int index) {
  // @@protoc_insertion_point(field_mutable:types.GandivaDataTypes.dataType)
  return datatype_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::ExtGandivaType >*
GandivaDataTypes::mutable_datatype() {
  // @@protoc_insertion_point(field_mutable_list:types.GandivaDataTypes.dataType)
  return &datatype_;
}
inline const ::types::ExtGandivaType& GandivaDataTypes::_internal_datatype(int index) const {
  return datatype_.Get(index);
}
inline const ::types::ExtGandivaType& GandivaDataTypes::datatype(int index) const {
  // @@protoc_insertion_point(field_get:types.GandivaDataTypes.dataType)
  return _internal_datatype(index);
}
inline ::types::ExtGandivaType* GandivaDataTypes::_internal_add_datatype() {
  return datatype_.Add();
}
inline ::types::ExtGandivaType* GandivaDataTypes::add_datatype() {
  // @@protoc_insertion_point(field_add:types.GandivaDataTypes.dataType)
  return _internal_add_datatype();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::ExtGandivaType >&
GandivaDataTypes::datatype() const {
  // @@protoc_insertion_point(field_list:types.GandivaDataTypes.dataType)
  return datatype_;
}

// -------------------------------------------------------------------

// GandivaFunctions

// repeated .types.FunctionSignature function = 1;
inline int GandivaFunctions::_internal_function_size() const {
  return function_.size();
}
inline int GandivaFunctions::function_size() const {
  return _internal_function_size();
}
inline void GandivaFunctions::clear_function() {
  function_.Clear();
}
inline ::types::FunctionSignature* GandivaFunctions::mutable_function(int index) {
  // @@protoc_insertion_point(field_mutable:types.GandivaFunctions.function)
  return function_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::FunctionSignature >*
GandivaFunctions::mutable_function() {
  // @@protoc_insertion_point(field_mutable_list:types.GandivaFunctions.function)
  return &function_;
}
inline const ::types::FunctionSignature& GandivaFunctions::_internal_function(int index) const {
  return function_.Get(index);
}
inline const ::types::FunctionSignature& GandivaFunctions::function(int index) const {
  // @@protoc_insertion_point(field_get:types.GandivaFunctions.function)
  return _internal_function(index);
}
inline ::types::FunctionSignature* GandivaFunctions::_internal_add_function() {
  return function_.Add();
}
inline ::types::FunctionSignature* GandivaFunctions::add_function() {
  // @@protoc_insertion_point(field_add:types.GandivaFunctions.function)
  return _internal_add_function();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::FunctionSignature >&
GandivaFunctions::function() const {
  // @@protoc_insertion_point(field_list:types.GandivaFunctions.function)
  return function_;
}

// -------------------------------------------------------------------

// FunctionSignature

// optional string name = 1;
inline bool FunctionSignature::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionSignature::has_name() const {
  return _internal_has_name();
}
inline void FunctionSignature::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FunctionSignature::name() const {
  // @@protoc_insertion_point(field_get:types.FunctionSignature.name)
  return _internal_name();
}
inline void FunctionSignature::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:types.FunctionSignature.name)
}
inline std::string* FunctionSignature::mutable_name() {
  // @@protoc_insertion_point(field_mutable:types.FunctionSignature.name)
  return _internal_mutable_name();
}
inline const std::string& FunctionSignature::_internal_name() const {
  return name_.GetNoArena();
}
inline void FunctionSignature::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FunctionSignature::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:types.FunctionSignature.name)
}
inline void FunctionSignature::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:types.FunctionSignature.name)
}
inline void FunctionSignature::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:types.FunctionSignature.name)
}
inline std::string* FunctionSignature::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FunctionSignature::release_name() {
  // @@protoc_insertion_point(field_release:types.FunctionSignature.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FunctionSignature::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:types.FunctionSignature.name)
}

// optional .types.ExtGandivaType returnType = 2;
inline bool FunctionSignature::_internal_has_returntype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || returntype_ != nullptr);
  return value;
}
inline bool FunctionSignature::has_returntype() const {
  return _internal_has_returntype();
}
inline void FunctionSignature::clear_returntype() {
  if (returntype_ != nullptr) returntype_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::types::ExtGandivaType& FunctionSignature::_internal_returntype() const {
  const ::types::ExtGandivaType* p = returntype_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::ExtGandivaType*>(
      &::types::_ExtGandivaType_default_instance_);
}
inline const ::types::ExtGandivaType& FunctionSignature::returntype() const {
  // @@protoc_insertion_point(field_get:types.FunctionSignature.returnType)
  return _internal_returntype();
}
inline ::types::ExtGandivaType* FunctionSignature::release_returntype() {
  // @@protoc_insertion_point(field_release:types.FunctionSignature.returnType)
  _has_bits_[0] &= ~0x00000002u;
  ::types::ExtGandivaType* temp = returntype_;
  returntype_ = nullptr;
  return temp;
}
inline ::types::ExtGandivaType* FunctionSignature::_internal_mutable_returntype() {
  _has_bits_[0] |= 0x00000002u;
  if (returntype_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::ExtGandivaType>(GetArenaNoVirtual());
    returntype_ = p;
  }
  return returntype_;
}
inline ::types::ExtGandivaType* FunctionSignature::mutable_returntype() {
  // @@protoc_insertion_point(field_mutable:types.FunctionSignature.returnType)
  return _internal_mutable_returntype();
}
inline void FunctionSignature::set_allocated_returntype(::types::ExtGandivaType* returntype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete returntype_;
  }
  if (returntype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      returntype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, returntype, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  returntype_ = returntype;
  // @@protoc_insertion_point(field_set_allocated:types.FunctionSignature.returnType)
}

// repeated .types.ExtGandivaType paramTypes = 3;
inline int FunctionSignature::_internal_paramtypes_size() const {
  return paramtypes_.size();
}
inline int FunctionSignature::paramtypes_size() const {
  return _internal_paramtypes_size();
}
inline void FunctionSignature::clear_paramtypes() {
  paramtypes_.Clear();
}
inline ::types::ExtGandivaType* FunctionSignature::mutable_paramtypes(int index) {
  // @@protoc_insertion_point(field_mutable:types.FunctionSignature.paramTypes)
  return paramtypes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::ExtGandivaType >*
FunctionSignature::mutable_paramtypes() {
  // @@protoc_insertion_point(field_mutable_list:types.FunctionSignature.paramTypes)
  return &paramtypes_;
}
inline const ::types::ExtGandivaType& FunctionSignature::_internal_paramtypes(int index) const {
  return paramtypes_.Get(index);
}
inline const ::types::ExtGandivaType& FunctionSignature::paramtypes(int index) const {
  // @@protoc_insertion_point(field_get:types.FunctionSignature.paramTypes)
  return _internal_paramtypes(index);
}
inline ::types::ExtGandivaType* FunctionSignature::_internal_add_paramtypes() {
  return paramtypes_.Add();
}
inline ::types::ExtGandivaType* FunctionSignature::add_paramtypes() {
  // @@protoc_insertion_point(field_add:types.FunctionSignature.paramTypes)
  return _internal_add_paramtypes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::ExtGandivaType >&
FunctionSignature::paramtypes() const {
  // @@protoc_insertion_point(field_list:types.FunctionSignature.paramTypes)
  return paramtypes_;
}

// -------------------------------------------------------------------

// InNode

// optional .types.FieldNode field = 1;
inline bool InNode::_internal_has_field() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || field_ != nullptr);
  return value;
}
inline bool InNode::has_field() const {
  return _internal_has_field();
}
inline void InNode::clear_field() {
  if (field_ != nullptr) field_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::types::FieldNode& InNode::_internal_field() const {
  const ::types::FieldNode* p = field_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::FieldNode*>(
      &::types::_FieldNode_default_instance_);
}
inline const ::types::FieldNode& InNode::field() const {
  // @@protoc_insertion_point(field_get:types.InNode.field)
  return _internal_field();
}
inline ::types::FieldNode* InNode::release_field() {
  // @@protoc_insertion_point(field_release:types.InNode.field)
  _has_bits_[0] &= ~0x00000001u;
  ::types::FieldNode* temp = field_;
  field_ = nullptr;
  return temp;
}
inline ::types::FieldNode* InNode::_internal_mutable_field() {
  _has_bits_[0] |= 0x00000001u;
  if (field_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::FieldNode>(GetArenaNoVirtual());
    field_ = p;
  }
  return field_;
}
inline ::types::FieldNode* InNode::mutable_field() {
  // @@protoc_insertion_point(field_mutable:types.InNode.field)
  return _internal_mutable_field();
}
inline void InNode::set_allocated_field(::types::FieldNode* field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete field_;
  }
  if (field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  field_ = field;
  // @@protoc_insertion_point(field_set_allocated:types.InNode.field)
}

// optional .types.IntConstants intValues = 2;
inline bool InNode::_internal_has_intvalues() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || intvalues_ != nullptr);
  return value;
}
inline bool InNode::has_intvalues() const {
  return _internal_has_intvalues();
}
inline void InNode::clear_intvalues() {
  if (intvalues_ != nullptr) intvalues_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::types::IntConstants& InNode::_internal_intvalues() const {
  const ::types::IntConstants* p = intvalues_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::IntConstants*>(
      &::types::_IntConstants_default_instance_);
}
inline const ::types::IntConstants& InNode::intvalues() const {
  // @@protoc_insertion_point(field_get:types.InNode.intValues)
  return _internal_intvalues();
}
inline ::types::IntConstants* InNode::release_intvalues() {
  // @@protoc_insertion_point(field_release:types.InNode.intValues)
  _has_bits_[0] &= ~0x00000002u;
  ::types::IntConstants* temp = intvalues_;
  intvalues_ = nullptr;
  return temp;
}
inline ::types::IntConstants* InNode::_internal_mutable_intvalues() {
  _has_bits_[0] |= 0x00000002u;
  if (intvalues_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::IntConstants>(GetArenaNoVirtual());
    intvalues_ = p;
  }
  return intvalues_;
}
inline ::types::IntConstants* InNode::mutable_intvalues() {
  // @@protoc_insertion_point(field_mutable:types.InNode.intValues)
  return _internal_mutable_intvalues();
}
inline void InNode::set_allocated_intvalues(::types::IntConstants* intvalues) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete intvalues_;
  }
  if (intvalues) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      intvalues = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intvalues, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  intvalues_ = intvalues;
  // @@protoc_insertion_point(field_set_allocated:types.InNode.intValues)
}

// optional .types.LongConstants longValues = 3;
inline bool InNode::_internal_has_longvalues() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || longvalues_ != nullptr);
  return value;
}
inline bool InNode::has_longvalues() const {
  return _internal_has_longvalues();
}
inline void InNode::clear_longvalues() {
  if (longvalues_ != nullptr) longvalues_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::types::LongConstants& InNode::_internal_longvalues() const {
  const ::types::LongConstants* p = longvalues_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::LongConstants*>(
      &::types::_LongConstants_default_instance_);
}
inline const ::types::LongConstants& InNode::longvalues() const {
  // @@protoc_insertion_point(field_get:types.InNode.longValues)
  return _internal_longvalues();
}
inline ::types::LongConstants* InNode::release_longvalues() {
  // @@protoc_insertion_point(field_release:types.InNode.longValues)
  _has_bits_[0] &= ~0x00000004u;
  ::types::LongConstants* temp = longvalues_;
  longvalues_ = nullptr;
  return temp;
}
inline ::types::LongConstants* InNode::_internal_mutable_longvalues() {
  _has_bits_[0] |= 0x00000004u;
  if (longvalues_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::LongConstants>(GetArenaNoVirtual());
    longvalues_ = p;
  }
  return longvalues_;
}
inline ::types::LongConstants* InNode::mutable_longvalues() {
  // @@protoc_insertion_point(field_mutable:types.InNode.longValues)
  return _internal_mutable_longvalues();
}
inline void InNode::set_allocated_longvalues(::types::LongConstants* longvalues) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete longvalues_;
  }
  if (longvalues) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      longvalues = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, longvalues, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  longvalues_ = longvalues;
  // @@protoc_insertion_point(field_set_allocated:types.InNode.longValues)
}

// optional .types.StringConstants stringValues = 4;
inline bool InNode::_internal_has_stringvalues() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || stringvalues_ != nullptr);
  return value;
}
inline bool InNode::has_stringvalues() const {
  return _internal_has_stringvalues();
}
inline void InNode::clear_stringvalues() {
  if (stringvalues_ != nullptr) stringvalues_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::types::StringConstants& InNode::_internal_stringvalues() const {
  const ::types::StringConstants* p = stringvalues_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::StringConstants*>(
      &::types::_StringConstants_default_instance_);
}
inline const ::types::StringConstants& InNode::stringvalues() const {
  // @@protoc_insertion_point(field_get:types.InNode.stringValues)
  return _internal_stringvalues();
}
inline ::types::StringConstants* InNode::release_stringvalues() {
  // @@protoc_insertion_point(field_release:types.InNode.stringValues)
  _has_bits_[0] &= ~0x00000008u;
  ::types::StringConstants* temp = stringvalues_;
  stringvalues_ = nullptr;
  return temp;
}
inline ::types::StringConstants* InNode::_internal_mutable_stringvalues() {
  _has_bits_[0] |= 0x00000008u;
  if (stringvalues_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::StringConstants>(GetArenaNoVirtual());
    stringvalues_ = p;
  }
  return stringvalues_;
}
inline ::types::StringConstants* InNode::mutable_stringvalues() {
  // @@protoc_insertion_point(field_mutable:types.InNode.stringValues)
  return _internal_mutable_stringvalues();
}
inline void InNode::set_allocated_stringvalues(::types::StringConstants* stringvalues) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stringvalues_;
  }
  if (stringvalues) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stringvalues = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stringvalues, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  stringvalues_ = stringvalues;
  // @@protoc_insertion_point(field_set_allocated:types.InNode.stringValues)
}

// optional .types.BinaryConstants binaryValues = 5;
inline bool InNode::_internal_has_binaryvalues() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || binaryvalues_ != nullptr);
  return value;
}
inline bool InNode::has_binaryvalues() const {
  return _internal_has_binaryvalues();
}
inline void InNode::clear_binaryvalues() {
  if (binaryvalues_ != nullptr) binaryvalues_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::types::BinaryConstants& InNode::_internal_binaryvalues() const {
  const ::types::BinaryConstants* p = binaryvalues_;
  return p != nullptr ? *p : *reinterpret_cast<const ::types::BinaryConstants*>(
      &::types::_BinaryConstants_default_instance_);
}
inline const ::types::BinaryConstants& InNode::binaryvalues() const {
  // @@protoc_insertion_point(field_get:types.InNode.binaryValues)
  return _internal_binaryvalues();
}
inline ::types::BinaryConstants* InNode::release_binaryvalues() {
  // @@protoc_insertion_point(field_release:types.InNode.binaryValues)
  _has_bits_[0] &= ~0x00000010u;
  ::types::BinaryConstants* temp = binaryvalues_;
  binaryvalues_ = nullptr;
  return temp;
}
inline ::types::BinaryConstants* InNode::_internal_mutable_binaryvalues() {
  _has_bits_[0] |= 0x00000010u;
  if (binaryvalues_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::BinaryConstants>(GetArenaNoVirtual());
    binaryvalues_ = p;
  }
  return binaryvalues_;
}
inline ::types::BinaryConstants* InNode::mutable_binaryvalues() {
  // @@protoc_insertion_point(field_mutable:types.InNode.binaryValues)
  return _internal_mutable_binaryvalues();
}
inline void InNode::set_allocated_binaryvalues(::types::BinaryConstants* binaryvalues) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete binaryvalues_;
  }
  if (binaryvalues) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      binaryvalues = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binaryvalues, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  binaryvalues_ = binaryvalues;
  // @@protoc_insertion_point(field_set_allocated:types.InNode.binaryValues)
}

// -------------------------------------------------------------------

// IntConstants

// repeated .types.IntNode intValues = 1;
inline int IntConstants::_internal_intvalues_size() const {
  return intvalues_.size();
}
inline int IntConstants::intvalues_size() const {
  return _internal_intvalues_size();
}
inline void IntConstants::clear_intvalues() {
  intvalues_.Clear();
}
inline ::types::IntNode* IntConstants::mutable_intvalues(int index) {
  // @@protoc_insertion_point(field_mutable:types.IntConstants.intValues)
  return intvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::IntNode >*
IntConstants::mutable_intvalues() {
  // @@protoc_insertion_point(field_mutable_list:types.IntConstants.intValues)
  return &intvalues_;
}
inline const ::types::IntNode& IntConstants::_internal_intvalues(int index) const {
  return intvalues_.Get(index);
}
inline const ::types::IntNode& IntConstants::intvalues(int index) const {
  // @@protoc_insertion_point(field_get:types.IntConstants.intValues)
  return _internal_intvalues(index);
}
inline ::types::IntNode* IntConstants::_internal_add_intvalues() {
  return intvalues_.Add();
}
inline ::types::IntNode* IntConstants::add_intvalues() {
  // @@protoc_insertion_point(field_add:types.IntConstants.intValues)
  return _internal_add_intvalues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::IntNode >&
IntConstants::intvalues() const {
  // @@protoc_insertion_point(field_list:types.IntConstants.intValues)
  return intvalues_;
}

// -------------------------------------------------------------------

// LongConstants

// repeated .types.LongNode longValues = 1;
inline int LongConstants::_internal_longvalues_size() const {
  return longvalues_.size();
}
inline int LongConstants::longvalues_size() const {
  return _internal_longvalues_size();
}
inline void LongConstants::clear_longvalues() {
  longvalues_.Clear();
}
inline ::types::LongNode* LongConstants::mutable_longvalues(int index) {
  // @@protoc_insertion_point(field_mutable:types.LongConstants.longValues)
  return longvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::LongNode >*
LongConstants::mutable_longvalues() {
  // @@protoc_insertion_point(field_mutable_list:types.LongConstants.longValues)
  return &longvalues_;
}
inline const ::types::LongNode& LongConstants::_internal_longvalues(int index) const {
  return longvalues_.Get(index);
}
inline const ::types::LongNode& LongConstants::longvalues(int index) const {
  // @@protoc_insertion_point(field_get:types.LongConstants.longValues)
  return _internal_longvalues(index);
}
inline ::types::LongNode* LongConstants::_internal_add_longvalues() {
  return longvalues_.Add();
}
inline ::types::LongNode* LongConstants::add_longvalues() {
  // @@protoc_insertion_point(field_add:types.LongConstants.longValues)
  return _internal_add_longvalues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::LongNode >&
LongConstants::longvalues() const {
  // @@protoc_insertion_point(field_list:types.LongConstants.longValues)
  return longvalues_;
}

// -------------------------------------------------------------------

// StringConstants

// repeated .types.StringNode stringValues = 1;
inline int StringConstants::_internal_stringvalues_size() const {
  return stringvalues_.size();
}
inline int StringConstants::stringvalues_size() const {
  return _internal_stringvalues_size();
}
inline void StringConstants::clear_stringvalues() {
  stringvalues_.Clear();
}
inline ::types::StringNode* StringConstants::mutable_stringvalues(int index) {
  // @@protoc_insertion_point(field_mutable:types.StringConstants.stringValues)
  return stringvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::StringNode >*
StringConstants::mutable_stringvalues() {
  // @@protoc_insertion_point(field_mutable_list:types.StringConstants.stringValues)
  return &stringvalues_;
}
inline const ::types::StringNode& StringConstants::_internal_stringvalues(int index) const {
  return stringvalues_.Get(index);
}
inline const ::types::StringNode& StringConstants::stringvalues(int index) const {
  // @@protoc_insertion_point(field_get:types.StringConstants.stringValues)
  return _internal_stringvalues(index);
}
inline ::types::StringNode* StringConstants::_internal_add_stringvalues() {
  return stringvalues_.Add();
}
inline ::types::StringNode* StringConstants::add_stringvalues() {
  // @@protoc_insertion_point(field_add:types.StringConstants.stringValues)
  return _internal_add_stringvalues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::StringNode >&
StringConstants::stringvalues() const {
  // @@protoc_insertion_point(field_list:types.StringConstants.stringValues)
  return stringvalues_;
}

// -------------------------------------------------------------------

// BinaryConstants

// repeated .types.BinaryNode binaryValues = 1;
inline int BinaryConstants::_internal_binaryvalues_size() const {
  return binaryvalues_.size();
}
inline int BinaryConstants::binaryvalues_size() const {
  return _internal_binaryvalues_size();
}
inline void BinaryConstants::clear_binaryvalues() {
  binaryvalues_.Clear();
}
inline ::types::BinaryNode* BinaryConstants::mutable_binaryvalues(int index) {
  // @@protoc_insertion_point(field_mutable:types.BinaryConstants.binaryValues)
  return binaryvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::BinaryNode >*
BinaryConstants::mutable_binaryvalues() {
  // @@protoc_insertion_point(field_mutable_list:types.BinaryConstants.binaryValues)
  return &binaryvalues_;
}
inline const ::types::BinaryNode& BinaryConstants::_internal_binaryvalues(int index) const {
  return binaryvalues_.Get(index);
}
inline const ::types::BinaryNode& BinaryConstants::binaryvalues(int index) const {
  // @@protoc_insertion_point(field_get:types.BinaryConstants.binaryValues)
  return _internal_binaryvalues(index);
}
inline ::types::BinaryNode* BinaryConstants::_internal_add_binaryvalues() {
  return binaryvalues_.Add();
}
inline ::types::BinaryNode* BinaryConstants::add_binaryvalues() {
  // @@protoc_insertion_point(field_add:types.BinaryConstants.binaryValues)
  return _internal_add_binaryvalues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::BinaryNode >&
BinaryConstants::binaryvalues() const {
  // @@protoc_insertion_point(field_list:types.BinaryConstants.binaryValues)
  return binaryvalues_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace types

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::types::GandivaType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::types::GandivaType>() {
  return ::types::GandivaType_descriptor();
}
template <> struct is_proto_enum< ::types::DateUnit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::types::DateUnit>() {
  return ::types::DateUnit_descriptor();
}
template <> struct is_proto_enum< ::types::TimeUnit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::types::TimeUnit>() {
  return ::types::TimeUnit_descriptor();
}
template <> struct is_proto_enum< ::types::IntervalType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::types::IntervalType>() {
  return ::types::IntervalType_descriptor();
}
template <> struct is_proto_enum< ::types::SelectionVectorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::types::SelectionVectorType>() {
  return ::types::SelectionVectorType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Types_2eproto
